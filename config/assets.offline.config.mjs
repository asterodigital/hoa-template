import fs from 'fs-extra'
import path from 'path'
import { log } from '../tools/utils.mjs'
import { glob } from 'glob'

function syncAssetsOffline() {
  return new Promise((resolve, reject) => {
    ;(async () => {
      try {
        const distDir = './dist/offline/assets'
        const srcDir = './src/assets'
        const distRootDir = './dist/offline'

        // Ensure directories exist
        fs.ensureDirSync(distDir)
        fs.ensureDirSync(distRootDir)

        // Get list of files in both directories
        const srcFiles = getAllFiles(srcDir)
        const distFiles = getAllFiles(distDir)

        // Find files that exist in dist but not in src
        const obsoleteFiles = distFiles.filter((distFile) => {
          const relativePath = path.relative(distDir, distFile)
          const srcPath = path.join(srcDir, relativePath)
          return !srcFiles.includes(srcPath)
        })

        // Remove obsolete files
        obsoleteFiles.forEach((file) => {
          fs.removeSync(file)
          log(`Removed obsolete file: ${file}`)
        })

        // Copy current assets
        fs.copySync(srcDir, distDir)

        // Handle favicon files separately - copy to root for offline build
        const faviconGlob = path.join(srcDir, 'favicon/**/*')
        const faviconFiles = await glob(faviconGlob)
        const faviconSrcDir = './src/assets/favicon'

        faviconFiles.forEach((file) => {
          const srcPath = path.join(faviconSrcDir, file)
          const destPath = path.join(distRootDir, path.basename(file))
          if (fs.statSync(srcPath).isFile()) {
            fs.copySync(srcPath, destPath)
          }
        })
        log(
          `Copied ${faviconFiles.length} favicon files to offline build root`,
          'success',
          'ASSETS-OFF'
        )

        // Note: The main index.html is generated by Astro from src/html/pages/index.astro
        // No need to copy the root redirect file as Astro builds the proper landing page

        log('Offline assets synchronized successfully!', 'success', 'ASSETS-OFF')
        resolve()
      } catch (error) {
        log(`Offline asset sync error: ${error}`, 'error')
        reject(error)
      }
    })()
  })
}

function getAllFiles(dir) {
  const files = []

  function traverse(currentDir) {
    if (!fs.existsSync(currentDir)) {
      return
    }

    const entries = fs.readdirSync(currentDir, { withFileTypes: true })

    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry.name)
      if (entry.isDirectory()) {
        traverse(fullPath)
      } else {
        files.push(fullPath)
      }
    }
  }

  traverse(dir)
  return files
}

syncAssetsOffline()
