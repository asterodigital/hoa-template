---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with breadcrumb navigation
const popoverPageHeader = {
  title: 'Popovers',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Popovers', class: 'active' }
  ]
}

// Basic popover example with title and content
const basicPopoverExample = `<div class="d-flex gap-2">
  <button
    type="button"
    class="btn btn-lg btn-danger"
    data-bs-toggle="popover"
    data-bs-title="Popover title"
    data-bs-content="And here's some amazing content. It's very engaging. Right?"
  >
    <i class="ri-information-line me-1"></i>
    Click to toggle popover
  </button>

  <button
    type="button"
    class="btn btn-lg btn-primary"
    data-bs-toggle="popover"
    data-bs-trigger="hover"
    data-bs-title="Hover Popover"
    data-bs-content="This popover appears on hover instead of click."
  >
    <i class="ri-cursor-line me-1"></i>
    Hover to show popover
  </button>
</div>
`

// Directional popovers example
const directionalPopoversExample = `<div class="popover-directions d-flex flex-wrap gap-2">
  <button
    type="button"
    class="btn btn-secondary"
    data-bs-container="body"
    data-bs-toggle="popover"
    data-bs-placement="top"
    data-bs-content="This popover appears above the button"
  >
    <i class="ri-arrow-up-line me-1"></i>
    Popover on top
  </button>

  <button
    type="button"
    class="btn btn-secondary"
    data-bs-container="body"
    data-bs-toggle="popover"
    data-bs-placement="right"
    data-bs-content="This popover appears to the right of the button"
  >
    <i class="ri-arrow-right-line me-1"></i>
    Popover on right
  </button>

  <button
    type="button"
    class="btn btn-secondary"
    data-bs-container="body"
    data-bs-toggle="popover"
    data-bs-placement="bottom"
    data-bs-content="This popover appears below the button"
  >
    <i class="ri-arrow-down-line me-1"></i>
    Popover on bottom
  </button>

  <button
    type="button"
    class="btn btn-secondary"
    data-bs-container="body"
    data-bs-toggle="popover"
    data-bs-placement="left"
    data-bs-content="This popover appears to the left of the button"
  >
    <i class="ri-arrow-left-line me-1"></i>
    Popover on left
  </button>
</div>
`

// Interactive elements example
const interactiveElementsExample = `<div class="d-flex gap-3 align-items-center">
  <!-- Disabled button with popover -->
  <span
    class="d-inline-block"
    tabindex="0"
    data-bs-toggle="popover"
    data-bs-trigger="hover focus"
    data-bs-content="This button is disabled but still shows a popover"
  >
    <button class="btn btn-primary" type="button" disabled>
      <i class="ri-lock-line me-1"></i>
      Disabled button
    </button>
  </span>

  <!-- Link with popover -->
  <a
    href="#"
    class="text-decoration-none"
    data-bs-toggle="popover"
    data-bs-trigger="hover"
    data-bs-content="Popovers can be added to links too!"
  >
    <i class="ri-link me-1"></i>
    Hover over this link
  </a>
</div>
`

// Rich content popover example
const richContentPopoverExample = `<button
  type="button"
  class="btn btn-lg btn-info"
  data-bs-toggle="popover"
  data-bs-title="Rich Content Popover"
  data-bs-html="true"
  data-bs-content="
    <div class='text-center'>
      <i class='ri-heart-fill text-danger fs-2 mb-2'></i>
      <p class='mb-2'>You can include <strong>HTML content</strong> in popovers!</p>
      <small class='text-muted'>Use data-bs-html='true' to enable HTML content</small>
    </div>
  "
>
  <i class="ri-html5-line me-1"></i>
  Show rich content
</button>
`
---

<AdminLayout
  title="Popovers"
  description="Interactive popovers for enhanced user interface feedback"
  currentPath="docs/interface/popovers"
  enableComponentPreview={true}
>
  <PageHeader {...popoverPageHeader} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Popovers are powerful UI components that provide contextual information or additional
            content when users interact with elements. They enhance user experience by displaying
            helpful information, tooltips, or rich content without disrupting the page flow. Built
            with accessibility in mind, popovers can be triggered by various user interactions and
            positioned flexibly around their trigger elements.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="basic-usage">Basic Usage</h3>
            <p class="py-2">
              Popovers are initialized using <code>data-bs-toggle="popover"</code> and can be triggered
              by different user interactions. Use <code>data-bs-title</code> for the header and <code
                >data-bs-content</code
              > for the body. The <code>data-bs-trigger</code>
              attribute controls how the popover is activated (click, hover, focus).
            </p>

            <ComponentPreview
              title="Basic Popovers"
              height="250px"
              component={basicPopoverExample}
              htmlCode={basicPopoverExample}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0" id="directions">Directional Placement</h3>
            <p class="py-2">
              Control popover positioning with the <code>data-bs-placement</code> attribute. Options
              include <code>top</code>,
              <code>right</code>, <code>bottom</code>, or <code>left</code>. The placement
              automatically adjusts if there isn't enough space in the specified direction.
            </p>

            <ComponentPreview
              title="Directional Popovers"
              height="300px"
              component={directionalPopoversExample}
              htmlCode={directionalPopoversExample}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0" id="interactive">Interactive Elements</h3>
            <p class="py-2">
              Popovers can be applied to various interactive elements, including disabled buttons
              and links. For disabled elements, wrap them in a container that can receive the focus
              and trigger events. Use <code>data-bs-trigger="hover focus"</code>
              to support both mouse and keyboard interactions.
            </p>

            <ComponentPreview
              title="Interactive Elements"
              height="200px"
              component={interactiveElementsExample}
              htmlCode={interactiveElementsExample}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0" id="rich-content">Rich Content</h3>
            <p class="py-2">
              Enhance popovers with HTML content using <code>data-bs-html="true"</code>. This allows
              you to include formatted text, icons, and other HTML elements within your popovers.
              Remember to properly escape content to prevent XSS vulnerabilities.
            </p>

            <ComponentPreview
              title="Rich Content Popover"
              height="250px"
              component={richContentPopoverExample}
              htmlCode={richContentPopoverExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
