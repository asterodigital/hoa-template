---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with breadcrumb navigation
const pageHeaderConfig = {
  title: 'Buttons',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Buttons', class: 'active' }
  ]
}

// Standard button variants showcasing different contextual styles
const standardButtonVariants = `<div class="d-flex flex-wrap gap-3">
  <button type="button" class="btn btn-primary"><i class="ri-check-line me-1"></i>Primary</button>
  <button type="button" class="btn btn-secondary"><i class="ri-arrow-go-back-line me-1"></i>Secondary</button>
  <button type="button" class="btn btn-success"><i class="ri-check-double-line me-1"></i>Success</button>
  <button type="button" class="btn btn-danger"><i class="ri-close-circle-line me-1"></i>Danger</button>
  <button type="button" class="btn btn-warning"><i class="ri-alert-line me-1"></i>Warning</button>
  <button type="button" class="btn btn-info"><i class="ri-information-line me-1"></i>Info</button>
  <button type="button" class="btn btn-light"><i class="ri-sun-line me-1"></i>Light</button>
  <button type="button" class="btn btn-dark"><i class="ri-moon-line me-1"></i>Dark</button>
</div>`

// Different HTML elements that can be styled as buttons
const buttonElementExamples = `<a class="btn btn-primary" href="#" role="button"><i class="ri-link me-1"></i>Link</a>
<button class="btn btn-primary" type="submit"><i class="ri-send-plane-line me-1"></i>Button</button>
<input class="btn btn-primary" type="submit" value="Submit">`

// Outline button styles for a more subtle appearance
const outlineButtonVariants = `<div class="d-flex flex-wrap gap-3">
  <button type="button" class="btn btn-outline-primary mb-1"><i class="ri-check-line me-1"></i>Primary</button>
  <button type="button" class="btn btn-outline-secondary mb-1"><i class="ri-arrow-go-back-line me-1"></i>Secondary</button>
  <button type="button" class="btn btn-outline-success mb-1"><i class="ri-check-double-line me-1"></i>Success</button>
  <button type="button" class="btn btn-outline-danger mb-1"><i class="ri-close-circle-line me-1"></i>Danger</button>
  <button type="button" class="btn btn-outline-warning mb-1"><i class="ri-alert-line me-1"></i>Warning</button>
  <button type="button" class="btn btn-outline-info mb-1"><i class="ri-information-line me-1"></i>Info</button>
</div>`

// Button size variations from extra small to extra large
const buttonSizeVariants = `<div class="d-flex flex-wrap justify-content-start align-items-end gap-3">
    <button type="button" class="btn btn-secondary btn-xs"><i class="ri-layout-grid-line me-1"></i>Extra Small</button>
    <button type="button" class="btn btn-secondary btn-sm"><i class="ri-layout-grid-line me-1"></i>Small</button>
    <button type="button" class="btn btn-secondary"><i class="ri-layout-grid-line me-1"></i>Default</button>
    <button type="button" class="btn btn-secondary btn-lg"><i class="ri-layout-grid-line me-1"></i>Large</button>
    <button type="button" class="btn btn-secondary btn-xl"><i class="ri-layout-grid-line me-1"></i>Extra Large</button>
</div>`

// Examples of disabled buttons showing both solid and outline styles
const disabledButtonExamples = `<div class="d-flex flex-wrap align-items-center gap-3">
  <button type="button" class="btn btn-primary mb-1" disabled><i class="ri-lock-line me-1"></i>Primary button</button>
  <button type="button" class="btn btn-outline-primary mb-1" disabled><i class="ri-lock-line me-1"></i>Primary outline</button>
  <button type="button" class="btn btn-secondary mb-1" disabled><i class="ri-lock-line me-1"></i>Secondary button</button>
  <button type="button" class="btn btn-outline-secondary mb-1" disabled><i class="ri-lock-line me-1"></i>Secondary outline</button>
</div>`

// Full-width block buttons with spacing
const blockButtonExample = `<div class="d-grid gap-2">
  <button class="btn btn-primary" type="button"><i class="ri-layout-row-line me-1"></i>Block Button</button>
  <button class="btn btn-secondary" type="button"><i class="ri-layout-row-line me-1"></i>Block Button</button>
</div>`

// Responsive button layout that stacks on mobile
const responsiveButtonLayout = `<div class="d-grid gap-2 d-md-block">
  <button class="btn btn-primary" type="button"><i class="ri-smartphone-line me-1"></i>Responsive Button</button>
  <button class="btn btn-secondary" type="button"><i class="ri-smartphone-line me-1"></i>Responsive Button</button>
</div>`

// Centered block buttons with specific width
const centeredBlockButtons = `<div class="d-grid gap-2 col-6 mx-auto">
  <button class="btn btn-primary" type="button"><i class="ri-align-center me-1"></i>Centered Button</button>
  <button class="btn btn-secondary" type="button"><i class="ri-align-center me-1"></i>Centered Button</button>
</div>`

// Right-aligned buttons for form actions
const rightAlignedButtons = `<div class="d-grid gap-2 d-md-flex justify-content-md-end">
  <button class="btn btn-secondary me-md-2" type="button"><i class="ri-close-line me-1"></i>Cancel</button>
  <button class="btn btn-primary" type="button"><i class="ri-check-line me-1"></i>Submit</button>
</div>`

// Toggle button states with aria attributes
const toggleButtonExamples = `<p class="d-inline-flex gap-1">
  <button type="button" class="btn" data-bs-toggle="button">Toggle State</button>
  <button type="button" class="btn active" data-bs-toggle="button" aria-pressed="true">Active State</button>
</p>
<p class="d-inline-flex gap-1">
  <button type="button" class="btn btn-primary" data-bs-toggle="button">Primary Toggle</button>
  <button type="button" class="btn btn-primary active" data-bs-toggle="button" aria-pressed="true">Primary Active</button>
</p>`

// Toggle links with button styling
const toggleLinkExamples = `<p class="d-inline-flex gap-1">
  <a href="#" class="btn" role="button" data-bs-toggle="button">Toggle Link</a>
  <a href="#" class="btn active" role="button" data-bs-toggle="button" aria-pressed="true">Active Link</a>
</p>
<p class="d-inline-flex gap-1">
  <a href="#" class="btn btn-primary" role="button" data-bs-toggle="button">Primary Link</a>
  <a href="#" class="btn btn-primary active" role="button" data-bs-toggle="button" aria-pressed="true">Active Primary</a>
</p>`

// Buttons with leading icons using Remixicon
const leadingIconButtons = `<div class="d-flex flex-wrap justify-content-start align-items-center gap-3">
    <button type="button" class="btn btn-primary"><i class="ri-save-line me-1"></i>Save Changes</button>
    <button type="button" class="btn btn-success"><i class="ri-add-circle-line me-1"></i>Create New</button>
    <button type="button" class="btn btn-info"><i class="ri-upload-cloud-line me-1"></i>Upload File</button>
    <button type="button" class="btn btn-warning"><i class="ri-pencil-line me-1"></i>Edit Item</button>
    <button type="button" class="btn btn-danger"><i class="ri-delete-bin-2-line me-1"></i>Remove Item</button>
    <button type="button" class="btn btn-secondary"><i class="ri-refresh-line me-1"></i>Refresh Data</button>
</div>`

// Buttons with trailing icons using Remixicon
const trailingIconButtons = `<div class="d-flex flex-wrap justify-content-start align-items-center gap-3">
    <button type="button" class="btn btn-primary">Next Step <i class="ri-arrow-right-line ms-1"></i></button>
    <button type="button" class="btn btn-info">Share Now <i class="ri-share-forward-line ms-1"></i></button>
    <button type="button" class="btn btn-success">Download <i class="ri-download-cloud-line ms-1"></i></button>
    <button type="button" class="btn btn-warning">Configure <i class="ri-settings-4-line ms-1"></i></button>
    <button type="button" class="btn btn-danger">Sign Out <i class="ri-logout-circle-r-line ms-1"></i></button>
    <button type="button" class="btn btn-secondary">View Details <i class="ri-external-link-line ms-1"></i></button>
</div>`

// Icon-only buttons for various use cases
const iconOnlyButtons = `<div class="d-flex flex-wrap justify-content-start align-items-center gap-4">
  <!-- Compact Toolbar -->
  <div class="border rounded p-2 bg-light d-flex gap-2">
    <button type="button" class="btn btn-light btn-icon-xs" title="Edit Document"><i class="ri-file-edit-line"></i></button>
    <button type="button" class="btn btn-light btn-icon-xs" title="Delete Item"><i class="ri-delete-bin-2-line"></i></button>
    <button type="button" class="btn btn-light btn-icon-xs" title="Share Content"><i class="ri-share-forward-line"></i></button>
    <button type="button" class="btn btn-light btn-icon-xs" title="Print Document"><i class="ri-printer-line"></i></button>
  </div>
  <!-- Action Buttons -->
  <div class="d-flex gap-2">
    <button type="button" class="btn btn-primary btn-icon" title="Create New"><i class="ri-add-circle-line"></i></button>
    <button type="button" class="btn btn-info btn-icon" title="Search Items"><i class="ri-search-2-line"></i></button>
    <button type="button" class="btn btn-warning btn-icon" title="Filter Results"><i class="ri-filter-3-line"></i></button>
    <button type="button" class="btn btn-success btn-icon" title="Refresh Data"><i class="ri-refresh-line"></i></button>
  </div>

  <!-- Social Media Actions -->
  <div class="d-flex gap-2">
    <button type="button" class="btn btn-primary btn-icon-sm" title="Share on Twitter"><i class="ri-twitter-x-line"></i></button>
    <button type="button" class="btn btn-info btn-icon-sm" title="Share on LinkedIn"><i class="ri-linkedin-box-line"></i></button>
    <button type="button" class="btn btn-danger btn-icon-sm" title="Share on YouTube"><i class="ri-youtube-line"></i></button>
    <button type="button" class="btn btn-primary btn-icon-sm" title="Share on Facebook"><i class="ri-facebook-circle-line"></i></button>
  </div>

  <!-- Floating Action Buttons -->
  <div class="d-flex align-items-center gap-3">
    <button type="button" class="btn btn-primary btn-icon-xs shadow-sm" title="Quick Action"><i class="ri-add-line"></i></button>
    <button type="button" class="btn btn-primary btn-icon-sm shadow" title="New Item"><i class="ri-add-line"></i></button>
    <button type="button" class="btn btn-primary btn-icon shadow" title="Create"><i class="ri-add-line"></i></button>
    <button type="button" class="btn btn-primary btn-icon-lg shadow" title="Add New"><i class="ri-add-line"></i></button>
    <button type="button" class="btn btn-primary btn-icon-xl shadow" title="New Content"><i class="ri-add-line"></i></button>
  </div>
</div>
`

// Loading state buttons with animated icons
const loadingStateButtons = `<div class="d-flex flex-wrap gap-2">
    <button class="btn btn-primary" type="button" disabled>
        <i class="ri-loader-4-line ri-spin me-1"></i>Loading...
    </button>
    <button class="btn btn-success" type="button" disabled>
        <i class="ri-refresh-line ri-spin me-1"></i>Processing
    </button>
    <button class="btn btn-info" type="button" disabled>
        <i class="ri-loader-2-line ri-spin me-1"></i>Saving
    </button>
    <button class="btn btn-warning" type="button" disabled>
        <i class="ri-loader-5-line ri-spin me-1"></i>Uploading
    </button>
</div>`
---

<AdminLayout
  title="Buttons"
  description="Comprehensive guide to button components and their variations"
  currentPath="docs/interface/buttons"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderConfig} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Buttons are essential interactive elements that enable users to trigger actions or
            navigate through your application. They serve as clear call-to-action elements, helping
            users understand what actions they can take. This guide demonstrates various button
            styles, sizes, and states to create intuitive and accessible user interfaces.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <h2 class="my-3" id="essential-button-patterns">Essential Button Patterns</h2>

          <!-- Standard Buttons Section -->
          <div class="my-3">
            <h3 class="mb-0" id="basic-buttons">Standard Buttons</h3>
            <p class="py-2">
              Choose from our comprehensive set of button styles to effectively communicate
              different types of actions:
              <ul>
                <li>
                  <strong>Primary:</strong> The main action that users are most likely to take (e.g.,
                  Submit, Save, Continue)
                </li>
                <li>
                  <strong>Secondary:</strong> Alternative or supporting actions that are less prominent
                  (e.g., Cancel, Back)
                </li>
                <li>
                  <strong>Success:</strong> Positive actions that complete or confirm something (e.g.,
                  Approve, Complete)
                </li>
                <li>
                  <strong>Danger:</strong> Destructive or irreversible actions that require caution (e.g.,
                  Delete, Remove)
                </li>
                <li>
                  <strong>Warning:</strong> Actions that need user attention or might have consequences
                </li>
                <li><strong>Info:</strong> Actions related to information or help</li>
              </ul>
            </p>

            <ComponentPreview
              title="Standard Button Variants"
              height="250px"
              component={standardButtonVariants}
              htmlCode={standardButtonVariants}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <!-- Button Sizes -->
          <div class="my-3">
            <h3 class="mb-0" id="button-sizes">Button Sizes</h3>
            <p class="py-2">
              Button sizes allow you to adjust the size of the button for different use cases. You
              can choose from extra small (<code>btn-xs</code>), small (<code>btn-sm</code>), medium
              (default), large (<code>btn-lg</code>), or extra large (<code>btn-xl</code>) buttons.
              These size classes give you flexibility in your UI design to create visual hierarchy
              and emphasize different actions.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Button Size Variations"
              height="200px"
              component={buttonSizeVariants}
              htmlCode={buttonSizeVariants}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <!-- Icon-Only Buttons -->
          <div class="my-3">
            <h3 class="mb-0" id="icon-buttons">Icon Buttons</h3>
            <p class="py-2">
              Icon buttons provide a compact way to represent actions using clear, meaningful icons.
              Available in multiple sizes using classes like <code>btn-icon-xs</code>, <code
                >btn-icon-sm</code
              >, <code>btn-icon</code> (default), <code>btn-icon-lg</code>, and <code
                >btn-icon-xl</code
              >. Each size is optimized for different use cases:
              <ul class="mt-2">
                <li>
                  <strong>Extra Small (btn-icon-xs):</strong> Perfect for compact toolbars and dense
                  UIs
                </li>
                <li>
                  <strong>Small (btn-icon-sm):</strong> Ideal for social sharing buttons and secondary
                  actions
                </li>
                <li><strong>Default (btn-icon):</strong> Standard size for common actions</li>
                <li>
                  <strong>Large (btn-icon-lg):</strong> Enhanced visibility for important actions
                </li>
                <li>
                  <strong>Extra Large (btn-icon-xl):</strong> Floating action buttons (FAB) and primary
                  actions
                </li>
              </ul>
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Icon-Only Buttons"
              height="300px"
              component={iconOnlyButtons}
              htmlCode={iconOnlyButtons}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <h2 class="mb-4 mt-5" id="alternative-button-styles">Alternative Button Styles</h2>

          <!-- Button Tags -->
          <div class="my-3">
            <h3 class="mb-0" id="button-tags">Button Tags</h3>
            <p class="py-2">
              Buttons can be created using different HTML elements based on their purpose:
              <ul>
                <li><strong>&lt;button&gt;:</strong> For clickable actions within forms or UI</li>
                <li>
                  <strong>&lt;a&gt;:</strong> For navigation or external links styled as buttons
                </li>
                <li>
                  <strong>&lt;input&gt;:</strong> For form submissions and input-based actions
                </li>
              </ul>
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Button Tags"
              height="100px"
              component={buttonElementExamples}
              htmlCode={buttonElementExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <!-- Outline Buttons -->
          <div class="my-3">
            <h3 class="mb-0" id="button-outline">Button Outline</h3>
            <p class="py-2">
              Button outlines are a variation of buttons where the button's background is
              transparent, and it has a border and text color that matches the button's theme. This
              gives the button a more minimalistic look, typically used for secondary actions or
              when you want a less prominent button.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Button Outline"
              height="200px"
              component={outlineButtonVariants}
              htmlCode={outlineButtonVariants}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="leading-icon">Leading Icon Buttons</h3>
            <p class="py-2">
              Buttons with leading icons place the icon before the text, creating a natural visual
              flow where the icon acts as a prefix to the label. This pattern is commonly used when
              the icon represents the action that will be performed (e.g., a save icon before
              "Save"), making the button's purpose immediately clear to users.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Leading Icon Buttons"
              height="200px"
              component={leadingIconButtons}
              htmlCode={leadingIconButtons}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="trailing-icon">Trailing Icon Buttons</h3>
            <p class="py-2">
              Buttons with trailing icons place the icon after the text, which can be useful for
              indicating the outcome of an action (e.g., "Open in new window" with an external link
              icon) or suggesting directional movement (e.g., "Next" with a forward arrow). This
              pattern helps users understand what will happen when they click the button.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Trailing Icon Buttons"
              height="200px"
              component={trailingIconButtons}
              htmlCode={trailingIconButtons}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <!-- Block Buttons -->
          <div class="my-3">
            <h3 class="mb-0" id="block-buttons">Block Buttons</h3>
            <p class="py-2">
              Block buttons are full-width buttons that stretch to fill the available width of their
              parent container. This is achieved by placing the buttons inside a container with the <code
                >d-grid</code
              > class and setting the <code>gap-2</code> class for spacing between them.
            </p>

            <!-- Button Examples -->
            <ComponentPreview
              title="Basic Block Buttons"
              height="150px"
              component={blockButtonExample}
              htmlCode={blockButtonExample}
              cssCode={``}
              jsCode={``}
            />

            <!-- Block Button Variations -->
            <p class="my-3">Block buttons can be configured for different layouts:</p>

            <ComponentPreview
              title="Responsive Block Buttons"
              height="150px"
              component={responsiveButtonLayout}
              htmlCode={responsiveButtonLayout}
              cssCode={``}
              jsCode={``}
            />

            <ComponentPreview
              title="Centered Block Buttons"
              height="150px"
              component={centeredBlockButtons}
              htmlCode={centeredBlockButtons}
              cssCode={``}
              jsCode={``}
            />

            <ComponentPreview
              title="Right-Aligned Block Buttons"
              height="150px"
              component={rightAlignedButtons}
              htmlCode={rightAlignedButtons}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <h2 class="mb-4 mt-5" id="states-and-behaviors">States & Behaviors</h2>

          <!-- Disabled Buttons -->
          <div class="my-3">
            <h3 class="mb-0" id="disabled-buttons">Disabled Buttons</h3>
            <p class="py-2">
              The disabled attribute can be added to buttons to make them unclickable, indicating
              that they are not currently available for interaction. This is commonly used for
              actions that are unavailable due to the current state of the application.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Disabled Buttons"
              height="250px"
              component={disabledButtonExamples}
              htmlCode={disabledButtonExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="toggle-states">Toggle States</h3>
            <p class="py-2">
              Toggle buttons allow users to switch between two states, such as "active" and
              "inactive." When the button is clicked, it changes its appearance and state, providing
              feedback to the user. The <code>data-bs-toggle="button"</code> attribute is used to enable
              this toggling functionality. The <code>aria-pressed="true"</code> attribute indicates the
              active state for accessibility.
            </p>

            <!-- Button Example -->
            <ComponentPreview
              title="Toggle Buttons"
              height="200px"
              component={toggleButtonExamples}
              htmlCode={toggleButtonExamples}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Toggle links work similarly to toggle buttons but are used as clickable links. By
              adding the <code>data-bs-toggle="button"</code>
              attribute, the link can toggle between "active" and "inactive" states.
            </p>

            <ComponentPreview
              title="Toggle Links"
              height="200px"
              component={toggleLinkExamples}
              htmlCode={toggleLinkExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <!-- Loading State Buttons -->
          <div class="my-3">
            <h3 class="mb-0" id="loading-states">Loading State Buttons</h3>
            <p class="py-2">
              Loading state buttons provide visual feedback during asynchronous operations. They
              combine animated icons with disabled states to indicate that an action is in progress.
              This prevents multiple submissions and improves user experience by showing that the
              system is responding.
            </p>

            <ComponentPreview
              title="Loading State Buttons"
              height="150px"
              component={loadingStateButtons}
              htmlCode={loadingStateButtons}
              cssCode={``}
              jsCode={``}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
