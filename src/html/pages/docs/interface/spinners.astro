---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

const pageHeaderProps = {
  title: 'Spinners',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Spinners', class: 'active' }
  ]
}

// Basic border spinner example with accessibility support
const basicBorderSpinnerExample = `<div class="spinner-border" role="status">
  <span class="visually-hidden">Loading content...</span>
</div>
`

// Contextual color variations for border spinners
const coloredBorderSpinnerExamples = `<div class="d-flex gap-2">
  <div class="spinner-border text-primary" role="status" title="Primary spinner">
    <span class="visually-hidden">Loading primary content...</span>
  </div>
  <div class="spinner-border text-secondary" role="status" title="Secondary spinner">
    <span class="visually-hidden">Loading secondary content...</span>
  </div>
  <div class="spinner-border text-success" role="status" title="Success spinner">
    <span class="visually-hidden">Loading success content...</span>
  </div>
  <div class="spinner-border text-danger" role="status" title="Danger spinner">
    <span class="visually-hidden">Loading critical content...</span>
  </div>
  <div class="spinner-border text-warning" role="status" title="Warning spinner">
    <span class="visually-hidden">Loading warning content...</span>
  </div>
  <div class="spinner-border text-info" role="status" title="Info spinner">
    <span class="visually-hidden">Loading info content...</span>
  </div>
  <div class="spinner-border text-light" role="status" title="Light spinner">
    <span class="visually-hidden">Loading light content...</span>
  </div>
  <div class="spinner-border text-dark" role="status" title="Dark spinner">
    <span class="visually-hidden">Loading dark content...</span>
  </div>
</div>
`

// Basic growing spinner example
const basicGrowingSpinnerExample = `<div class="spinner-grow" role="status">
  <span class="visually-hidden">Loading content...</span>
</div>
`

// Contextual color variations for growing spinners
const coloredGrowingSpinnerExamples = `<div class="d-flex gap-2">
  <div class="spinner-grow text-primary" role="status" title="Primary growing spinner">
    <span class="visually-hidden">Loading primary content...</span>
  </div>
  <div class="spinner-grow text-secondary" role="status" title="Secondary growing spinner">
    <span class="visually-hidden">Loading secondary content...</span>
  </div>
  <div class="spinner-grow text-success" role="status" title="Success growing spinner">
    <span class="visually-hidden">Loading success content...</span>
  </div>
  <div class="spinner-grow text-danger" role="status" title="Danger growing spinner">
    <span class="visually-hidden">Loading critical content...</span>
  </div>
  <div class="spinner-grow text-warning" role="status" title="Warning growing spinner">
    <span class="visually-hidden">Loading warning content...</span>
  </div>
  <div class="spinner-grow text-info" role="status" title="Info growing spinner">
    <span class="visually-hidden">Loading info content...</span>
  </div>
  <div class="spinner-grow text-light" role="status" title="Light growing spinner">
    <span class="visually-hidden">Loading light content...</span>
  </div>
  <div class="spinner-grow text-dark" role="status" title="Dark growing spinner">
    <span class="visually-hidden">Loading dark content...</span>
  </div>
</div>
`

// Example with margin spacing
const marginSpacingExample = `<div class="spinner-border m-5" role="status">
  <span class="visually-hidden">Loading content with margin...</span>
</div>
`

// Center-aligned spinner example
const centeredSpinnerExample = `<div class="d-flex justify-content-center">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading centered content...</span>
  </div>
</div>
`

// Spinner with text alignment example
const spinnerWithTextExample = `<div class="d-flex align-items-center gap-2">
  <strong role="status">
    <i class="ri-refresh-line me-2"></i>Loading data...
  </strong>
  <div class="spinner-border ms-auto" aria-hidden="true"></div>
</div>
`

// Float-aligned spinner example
const floatAlignedSpinnerExample = `<div class="clearfix">
  <div class="spinner-border float-end" role="status">
    <span class="visually-hidden">Loading float-aligned content...</span>
  </div>
</div>
`

// Text-aligned spinner example
const textAlignedSpinnerExample = `<div class="text-center">
  <div class="spinner-border" role="status">
    <span class="visually-hidden">Loading text-aligned content...</span>
  </div>
</div>
`

// Small size spinner examples
const smallSpinnerExamples = `<div class="d-flex gap-2 align-items-center">
  <div class="spinner-border spinner-border-sm" role="status" title="Small border spinner">
    <span class="visually-hidden">Loading small content...</span>
  </div>
  <div class="spinner-grow spinner-grow-sm" role="status" title="Small growing spinner">
    <span class="visually-hidden">Loading small content...</span>
  </div>
  <i class="ri-loader-2-line"></i>
</div>
`

// Custom size spinner examples
const customSizeSpinnerExamples = `<div class="d-flex gap-3 align-items-center">
  <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status" title="Large border spinner">
    <span class="visually-hidden">Loading large content...</span>
  </div>
  <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status" title="Large growing spinner">
    <span class="visually-hidden">Loading large content...</span>
  </div>
  <i class="ri-loader-4-line" style="font-size: 3rem;"></i>
</div>
`

// Button spinner examples with border style
const buttonBorderSpinnerExamples = `<div class="d-flex gap-2">
  <button class="btn btn-primary" type="button" disabled>
    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
    <span class="visually-hidden" role="status">Loading...</span>
  </button>
  <button class="btn btn-primary" type="button" disabled>
    <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
    <span role="status">Processing...</span>
  </button>
  <button class="btn btn-success" type="button" disabled>
    <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
    <i class="ri-save-line"></i>
    <span role="status">Saving...</span>
  </button>
</div>
`

// Button spinner examples with grow style
const buttonGrowSpinnerExamples = `<div class="d-flex gap-2">
  <button class="btn btn-primary" type="button" disabled>
    <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
    <span class="visually-hidden" role="status">Loading...</span>
  </button>
  <button class="btn btn-primary" type="button" disabled>
    <span class="spinner-grow spinner-grow-sm me-2" aria-hidden="true"></span>
    <span role="status">Loading data...</span>
  </button>
  <button class="btn btn-info" type="button" disabled>
    <span class="spinner-grow spinner-grow-sm me-2" aria-hidden="true"></span>
    <i class="ri-download-cloud-line"></i>
    <span role="status">Downloading...</span>
  </button>
</div>
`
---

<AdminLayout
  title="Spinners"
  description="Loading indicators and spinners for showing content loading states"
  currentPath="docs/interface/spinners"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderProps} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Spinners are essential loading indicators that provide visual feedback during content
            loading, data processing, or any asynchronous operation. They help improve user
            experience by indicating that the application is actively working on their request.
          </p>
          <div class="alert alert-info mt-3">
            <i class="ri-lightbulb-line me-2"></i>
            <strong>Best Practices:</strong>
            <ul class="mb-0 mt-2">
              <li>
                Use appropriate spinner sizes based on the context (small for buttons, larger for
                content areas)
              </li>
              <li>Include meaningful loading messages for better accessibility</li>
              <li>
                Choose colors that match your application's context (e.g., primary for main actions)
              </li>
              <li>Consider using growing spinners for more dynamic visual feedback</li>
            </ul>
          </div>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="border-spinner">Border Spinner</h3>
            <p class="py-2">
              The border spinner is the default loading indicator, created using the <code
                >spinner-border</code
              > class. It provides a simple rotating border animation that's widely recognized as a loading
              state.
            </p>

            <ComponentPreview
              title="Border Spinner"
              height="100px"
              component={basicBorderSpinnerExample}
              htmlCode={basicBorderSpinnerExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="colors">Contextual Colors</h3>
            <p class="py-2">
              Customize spinner colors using Bootstrap's text color utilities (<code>text-*</code>)
              to match your application's context and provide meaningful visual cues about the type
              of content being loaded.
            </p>

            <ComponentPreview
              title="Colored Spinners"
              height="100px"
              component={coloredBorderSpinnerExamples}
              htmlCode={coloredBorderSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="growing-spinner">Growing Spinner</h3>
            <p class="py-2">
              The growing spinner (<code>spinner-grow</code>) provides an alternative animation
              style with a pulsing effect, useful for indicating more dynamic loading states or when
              you want to differentiate from the border spinner.
            </p>

            <ComponentPreview
              title="Growing Spinner"
              height="100px"
              component={basicGrowingSpinnerExample}
              htmlCode={basicGrowingSpinnerExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Like border spinners, growing spinners support contextual colors to match your
              application's visual hierarchy and meaning.
            </p>

            <ComponentPreview
              title="Colored Growing Spinners"
              height="100px"
              component={coloredGrowingSpinnerExamples}
              htmlCode={coloredGrowingSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="alignment">Spinner Alignment</h3>
            <p class="py-2">
              Position spinners using Bootstrap's flexbox utilities, margin utilities, or text
              alignment classes to achieve the desired layout and spacing in your interface.
            </p>
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="margin">Margin Spacing</h3>
            <p class="py-2">
              Add margin to spinners using Bootstrap's spacing utilities (<code>m-*</code>) to
              create appropriate spacing between elements.
            </p>

            <ComponentPreview
              title="Margin Spacing"
              height="200px"
              component={marginSpacingExample}
              htmlCode={marginSpacingExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="placement">Placement Options</h3>
            <p class="py-2">
              Different placement options help integrate spinners seamlessly into your layout,
              whether centered, aligned with text, or positioned using float utilities.
            </p>
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="flex">Flex Alignment</h3>

            <ComponentPreview
              title="Centered Spinner"
              height="100px"
              component={centeredSpinnerExample}
              htmlCode={centeredSpinnerExample}
              cssCode={``}
              jsCode={``}
            />

            <ComponentPreview
              title="Spinner with Text"
              height="100px"
              component={spinnerWithTextExample}
              htmlCode={spinnerWithTextExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="floats">Float Alignment</h3>

            <ComponentPreview
              title="Float-aligned Spinner"
              height="100px"
              component={floatAlignedSpinnerExample}
              htmlCode={floatAlignedSpinnerExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="text-align">Text Alignment</h3>

            <ComponentPreview
              title="Text-aligned Spinner"
              height="100px"
              component={textAlignedSpinnerExample}
              htmlCode={textAlignedSpinnerExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="size">Size Variations</h3>
            <p class="py-2">
              Use size variations to match your spinner with the surrounding content. Small spinners
              work well in buttons or inline elements, while larger ones are suitable for content
              areas.
            </p>

            <ComponentPreview
              title="Small Spinners"
              height="100px"
              component={smallSpinnerExamples}
              htmlCode={smallSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              For custom sizes, use inline styles or CSS to set specific dimensions:
            </p>

            <ComponentPreview
              title="Custom-sized Spinners"
              height="150px"
              component={customSizeSpinnerExamples}
              htmlCode={customSizeSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="buttons">Button Integration</h3>
            <p class="py-2">
              Integrate spinners into buttons to indicate loading states during form submissions or
              action processing. Use appropriate text to describe the ongoing action.
            </p>

            <ComponentPreview
              title="Buttons with Border Spinners"
              height="200px"
              component={buttonBorderSpinnerExamples}
              htmlCode={buttonBorderSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />

            <ComponentPreview
              title="Buttons with Growing Spinners"
              height="200px"
              component={buttonGrowSpinnerExamples}
              htmlCode={buttonGrowSpinnerExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
