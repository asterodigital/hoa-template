---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

const pageHeaderProps = {
  title: 'Toasts',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Toasts', class: 'active' }
  ]
}

// JavaScript for handling live toast demonstration
const toastDemoScript = `<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  // Toast functionality for live demonstrations
  window.showToast = function(type) {
    const toastId = type + 'Toast'
    const toastElement = document.getElementById(toastId)
    if (toastElement && window.bootstrap) {
      const toast = new window.bootstrap.Toast(toastElement)
      toast.show()
    }
  }

  window.showProgressToast = function() {
    const progressToastElement = document.getElementById('progressToast')
    if (progressToastElement && window.bootstrap) {
      const toast = new window.bootstrap.Toast(progressToastElement)
      toast.show()

      let progress = 0
      const interval = setInterval(() => {
        progress += Math.random() * 15 + 5
        if (progress >= 100) {
          progress = 100
          clearInterval(interval)
        }

        const progressBar = document.getElementById('progressBar')
        const progressPercent = document.getElementById('progressPercent')

        if (progressBar) progressBar.style.width = progress + '%'
        if (progressPercent) progressPercent.textContent = Math.round(progress) + '%'

        if (progress === 100) {
          setTimeout(() => toast.hide(), 1000)
        }
      }, 300)
    }
  }

  window.showAutoToast = function() {
    const autoToastElement = document.getElementById('autoToast')
    if (autoToastElement && window.bootstrap) {
      const toast = new window.bootstrap.Toast(autoToastElement)
      toast.show()
    }
  }

  window.showCountdownToast = function() {
    const countdownToastElement = document.getElementById('countdownToast')
    if (countdownToastElement && window.bootstrap) {
      const toast = new window.bootstrap.Toast(countdownToastElement)
      toast.show()

      let seconds = 10
      const interval = setInterval(() => {
        seconds--
        const countdownDisplay = document.getElementById('countdownDisplay')
        const countdownTime = document.getElementById('countdownTime')

        if (countdownDisplay) countdownDisplay.textContent = seconds
        if (countdownTime) countdownTime.textContent = seconds + 's'

        if (seconds <= 0) {
          clearInterval(interval)
          toast.hide()
        }
      }, 1000)
    }
  }

  // Legacy support for original demo
  const toastTriggerBtn = document.getElementById('liveToastBtn')
  const toastNotification = document.getElementById('liveToast')

  if (toastTriggerBtn && toastNotification) {
    const toastInstance = window.bootstrap.Toast.getOrCreateInstance(toastNotification)
    toastTriggerBtn.addEventListener('click', () => {
      toastInstance.show()
    })
  }
})
</script>
`

// Basic toast example with Remixicon
const basicToastExample = `<div class="row g-3">
  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-checkbox-circle-line me-2 text-success" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">Success</strong>
        <small>Just now</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Your profile has been updated successfully!
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-information-line me-2 text-info" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">Information</strong>
        <small>2 mins ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        New features are now available in your dashboard.
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-error-warning-line me-2 text-warning" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">Warning</strong>
        <small>5 mins ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Your session will expire in 10 minutes. Please save your work.
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-close-circle-line me-2 text-danger" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">Error</strong>
        <small>1 min ago</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Failed to save changes. Please check your connection and try again.
      </div>
    </div>
  </div>
</div>`

// Live toast demonstration example
const liveToastExample = `<div class="row g-2 mb-3">
  <div class="col-auto">
    <button type="button" class="btn btn-success" onclick="showToast('success')">
      <i class="ri-check-line me-2"></i>Success Toast
    </button>
  </div>
  <div class="col-auto">
    <button type="button" class="btn btn-info" onclick="showToast('info')">
      <i class="ri-information-line me-2"></i>Info Toast
    </button>
  </div>
  <div class="col-auto">
    <button type="button" class="btn btn-warning" onclick="showToast('warning')">
      <i class="ri-error-warning-line me-2"></i>Warning Toast
    </button>
  </div>
  <div class="col-auto">
    <button type="button" class="btn btn-danger" onclick="showToast('error')">
      <i class="ri-close-circle-line me-2"></i>Error Toast
    </button>
  </div>
</div>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
  <!-- Success Toast -->
  <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-checkbox-circle-line me-2 text-success" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Success</strong>
      <small class="text-body-secondary">just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Operation completed successfully!
    </div>
  </div>

  <!-- Info Toast -->
  <div id="infoToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-information-line me-2 text-info" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Information</strong>
      <small class="text-body-secondary">just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Here's some helpful information for you.
    </div>
  </div>

  <!-- Warning Toast -->
  <div id="warningToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-error-warning-line me-2 text-warning" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Warning</strong>
      <small class="text-body-secondary">just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Please review your settings before proceeding.
    </div>
  </div>

  <!-- Error Toast -->
  <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-close-circle-line me-2 text-danger" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Error</strong>
      <small class="text-body-secondary">just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      An error occurred. Please try again.
    </div>
  </div>
</div>`

// Translucent toast example
const translucentToastExample = `<div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="toast-header">
    <i class="ri-information-line me-2 text-info" style="font-size: 1.25rem;"></i>
    <strong class="me-auto">Information</strong>
    <small class="text-body-secondary">2 minutes ago</small>
    <button type="button" class="btn-close text-bg-light" data-bs-dismiss="toast" aria-label="Close"></button>
  </div>
  <div class="toast-body">
    Your changes have been automatically saved.
  </div>
</div>
`

// Stacked toasts example
const stackedToastsExample = `<div class="toast-container position-static">
  <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-check-line me-2 text-success" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">File Upload</strong>
      <small class="text-body-secondary">just now</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Document.pdf uploaded successfully (2.4 MB)
    </div>
  </div>

  <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-error-warning-line me-2 text-warning" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Storage Warning</strong>
      <small class="text-body-secondary">2 seconds ago</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Your storage is 85% full. Consider upgrading your plan.
    </div>
  </div>

  <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-mail-line me-2 text-info" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">New Message</strong>
      <small class="text-body-secondary">5 seconds ago</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      You have 3 unread messages from your team.
    </div>
  </div>

  <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-calendar-event-line me-2 text-primary" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Meeting Reminder</strong>
      <small class="text-body-secondary">10 seconds ago</small>
      <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Team standup meeting starts in 15 minutes.
    </div>
  </div>
</div>`

// Simple toast example
const simpleToastExample = `<div class="toast show align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
  <div class="d-flex">
    <div class="toast-body">
      Settings saved successfully!
    </div>
    <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
  </div>
</div>
`

// Interactive toast example
const interactiveToastExample = `<div class="row g-3">
  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-body">
        <div class="d-flex align-items-center mb-2">
          <i class="ri-notification-3-line me-2 text-primary" style="font-size: 1.25rem;"></i>
          <strong>Enable Notifications?</strong>
        </div>
        <p class="mb-2">Get instant updates about your projects and team activities.</p>
        <div class="mt-2 pt-2 border-top">
          <button type="button" class="btn btn-primary btn-sm me-2">
            <i class="ri-check-line me-1"></i>Enable
          </button>
          <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="toast">
            <i class="ri-close-line me-1"></i>Not now
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-body">
        <div class="d-flex align-items-center mb-2">
          <i class="ri-download-cloud-line me-2 text-success" style="font-size: 1.25rem;"></i>
          <strong>Update Available</strong>
        </div>
        <p class="mb-2">Version 2.1.0 is ready to install with new features and improvements.</p>
        <div class="mt-2 pt-2 border-top">
          <button type="button" class="btn btn-success btn-sm me-2">
            <i class="ri-download-line me-1"></i>Install Now
          </button>
          <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="toast">
            <i class="ri-time-line me-1"></i>Remind Later
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-body">
        <div class="d-flex align-items-center mb-2">
          <i class="ri-shield-check-line me-2 text-warning" style="font-size: 1.25rem;"></i>
          <strong>Security Alert</strong>
        </div>
        <p class="mb-2">We detected a login from a new device. Was this you?</p>
        <div class="mt-2 pt-2 border-top">
          <button type="button" class="btn btn-warning btn-sm me-2">
            <i class="ri-check-line me-1"></i>Yes, it's me
          </button>
          <button type="button" class="btn btn-danger btn-sm">
            <i class="ri-shield-line me-1"></i>Secure Account
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-body">
        <div class="d-flex align-items-center mb-2">
          <i class="ri-star-line me-2 text-info" style="font-size: 1.25rem;"></i>
          <strong>Rate Your Experience</strong>
        </div>
        <p class="mb-2">How would you rate our new dashboard interface?</p>
        <div class="mt-2 pt-2 border-top">
          <button type="button" class="btn btn-info btn-sm me-2">
            <i class="ri-thumb-up-line me-1"></i>Good
          </button>
          <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="toast">
            <i class="ri-feedback-line me-1"></i>Feedback
          </button>
        </div>
      </div>
    </div>
  </div>
</div>`

// Colored toast example
const coloredToastExample = `<div class="row g-3">
  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-checkbox-circle-line me-2"></i>
          Account successfully verified! Welcome to the platform.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-info border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-information-line me-2"></i>
          New dashboard features are now available for testing.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-warning border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-error-warning-line me-2"></i>
          Your subscription expires in 3 days. Renew to continue service.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-close-circle-line me-2"></i>
          Payment failed. Please update your payment method.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-dark border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-moon-line me-2"></i>
          Dark mode has been enabled for better night viewing.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="toast show align-items-center text-bg-secondary border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class="ri-settings-line me-2"></i>
          Settings have been saved and will take effect immediately.
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
</div>`

// Positioned toasts example
const positionedToastsExample = `<div aria-live="polite" aria-atomic="true" class="position-relative">
  <div class="toast-container top-0 end-0 p-3">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-mail-line me-2 text-primary" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">New Message</strong>
        <small class="text-body-secondary">just now</small>
        <button type="button" class="btn-close text-bg-light" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        You have 3 unread messages.
      </div>
    </div>

    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <i class="ri-calendar-event-line me-2 text-info" style="font-size: 1.25rem;"></i>
        <strong class="me-auto">Calendar</strong>
        <small class="text-body-secondary">2 seconds ago</small>
        <button type="button" class="btn-close text-bg-light" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body">
        Meeting reminder: Team sync in 15 minutes.
      </div>
    </div>
  </div>
</div>`

// Centered toast example
const centeredToastExample = `<!-- Flexbox container for centering the toast -->
<div aria-live="polite" aria-atomic="true" class="d-flex justify-content-center align-items-center w-100">
  <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
      <i class="ri-gift-line me-2 text-success" style="font-size: 1.25rem;"></i>
      <strong class="me-auto">Special Offer</strong>
      <small>5 mins ago</small>
      <button type="button" class="btn-close text-bg-light" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
    <div class="toast-body">
      Limited time offer: Get 20% off on your next purchase!
    </div>
  </div>
</div>
`
---

<AdminLayout
  title="Toasts"
  description="Interactive toast notifications for user feedback"
  currentPath="docs/interface/toasts"
  enableComponentPreview={true}
  pageScript={toastDemoScript}
>
  <PageHeader {...pageHeaderProps} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Toast notifications are lightweight, non-intrusive alerts that provide timely feedback
            to users. They are perfect for displaying success messages, warnings, or important
            updates without disrupting the user experience. Toasts can be customized with different
            styles, positions, and interactive elements to suit your application's needs.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="basic-example">Basic Example</h3>
            <p class="py-2">
              A standard toast notification featuring an icon, title, timestamp, and dismissible
              button. This example demonstrates the basic structure and essential elements of a
              toast message.
            </p>

            <ComponentPreview
              title="Basic Toast"
              height="450px"
              component={basicToastExample}
              htmlCode={basicToastExample}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="live-demo">Live Demonstration</h3>
            <p class="py-2">
              Click the button below to trigger a toast notification. This interactive example shows
              how toasts can be programmatically displayed in response to user actions.
            </p>

            <ComponentPreview
              title="Live Toast Demo"
              height="400px"
              component={liveToastExample}
              htmlCode={liveToastExample}
              jsCode={`<script>
function showToast(type) {
  const toastId = type + 'Toast';
  const toastElement = document.getElementById(toastId);
  if (toastElement && window.bootstrap) {
    const toast = new window.bootstrap.Toast(toastElement);
    toast.show();
  }
}

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Make function globally available
  window.showToast = showToast;
});
</script>`}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="translucent-toast">Translucent Toast</h3>
            <p class="py-2">
              A semi-transparent toast that blends with the background while maintaining
              readability. Perfect for creating a subtle notification that doesn't overwhelm the
              interface.
            </p>

            <ComponentPreview
              title="Translucent Toast"
              height="200px"
              component={translucentToastExample}
              htmlCode={translucentToastExample}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="stacking-toasts">Stacking Toasts</h3>
            <p class="py-2">
              Multiple toasts can be stacked in a container, automatically arranging themselves
              vertically. This pattern is useful when multiple notifications need to be displayed
              simultaneously.
            </p>

            <ComponentPreview
              title="Stacked Toasts"
              height="450px"
              component={stackedToastsExample}
              htmlCode={stackedToastsExample}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="custom-toasts">Custom Toasts</h3>
            <p class="py-2">
              Simplified toast variant with minimal styling, perfect for quick status updates or
              simple messages.
            </p>

            <ComponentPreview
              title="Simple Toast"
              height="200px"
              component={simpleToastExample}
              htmlCode={simpleToastExample}
            />

            <p class="py-2">
              Interactive toast with action buttons, ideal for prompting user decisions or
              responses.
            </p>

            <ComponentPreview
              title="Interactive Toast"
              height="600px"
              component={interactiveToastExample}
              htmlCode={interactiveToastExample}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="color-schemes">Color Schemes</h3>
            <p class="py-2">
              Toasts can be styled with different background colors to indicate various message
              types or importance levels. Use utility classes like <code>text-bg-primary</code>, <code
                >text-bg-success</code
              >, or <code>text-bg-danger</code>
              to create contextual notifications.
            </p>

            <ComponentPreview
              title="Colored Toast"
              height="500px"
              component={coloredToastExample}
              htmlCode={coloredToastExample}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="placement">Toast Placement</h3>
            <p class="py-2">
              Toasts can be positioned anywhere on the screen using Bootstrap's position utilities.
              Common placements include top-right, bottom-right, or center of the viewport.
            </p>

            <ComponentPreview
              title="Positioned Toasts"
              height="350px"
              component={positionedToastsExample}
              htmlCode={positionedToastsExample}
            />

            <p class="py-2">
              Center-aligned toast using Flexbox utilities, useful for important messages that need
              to capture the user's attention.
            </p>

            <ComponentPreview
              title="Centered Toast"
              height="250px"
              component={centeredToastExample}
              htmlCode={centeredToastExample}
            />
          </div>

          <!-- Advanced Toast Examples -->
          <div class="my-3">
            <h3 class="mb-0" id="advanced-toasts">Advanced Toast Examples</h3>
            <p class="py-2">
              Advanced toast implementations with auto-dismiss timers, progress indicators, and
              dynamic content updates for sophisticated notification systems.
            </p>

            <ComponentPreview
              title="Advanced Toast Features"
              height="400px"
              component={`<div class="row g-3">
                <div class="col-auto">
                  <button type="button" class="btn btn-primary" onclick="showProgressToast()">
                    <i class="ri-download-line me-2"></i>Progress Toast
                  </button>
                </div>
                <div class="col-auto">
                  <button type="button" class="btn btn-success" onclick="showAutoToast()">
                    <i class="ri-time-line me-2"></i>Auto-dismiss
                  </button>
                </div>
                <div class="col-auto">
                  <button type="button" class="btn btn-info" onclick="showCountdownToast()">
                    <i class="ri-timer-line me-2"></i>Countdown Toast
                  </button>
                </div>
              </div>

              <div class="toast-container position-fixed top-0 end-0 p-3">
                <!-- Progress Toast -->
                <div id="progressToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="toast-header">
                    <i class="ri-download-cloud-line me-2 text-primary" style="font-size: 1.25rem;"></i>
                    <strong class="me-auto">Downloading</strong>
                    <small class="text-body-secondary">File transfer</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                  <div class="toast-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                      <span>application-v2.1.0.zip</span>
                      <span id="progressPercent">0%</span>
                    </div>
                    <div class="progress" style="height: 6px;">
                      <div id="progressBar" class="progress-bar bg-primary" style="width: 0%"></div>
                    </div>
                  </div>
                </div>

                <!-- Auto-dismiss Toast -->
                <div id="autoToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
                  <div class="toast-header">
                    <i class="ri-checkbox-circle-line me-2 text-success" style="font-size: 1.25rem;"></i>
                    <strong class="me-auto">Auto Notification</strong>
                    <small class="text-body-secondary">Auto-dismiss in 5s</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                  <div class="toast-body">
                    This toast will automatically disappear in 5 seconds.
                  </div>
                </div>

                <!-- Countdown Toast -->
                <div id="countdownToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                  <div class="toast-header">
                    <i class="ri-timer-line me-2 text-warning" style="font-size: 1.25rem;"></i>
                    <strong class="me-auto">Session Timer</strong>
                    <small id="countdownTime" class="text-body-secondary">10s</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                  </div>
                  <div class="toast-body">
                    Your session will expire in <span id="countdownDisplay">10</span> seconds.
                  </div>
                </div>
              </div>`}
              htmlCode={`<button onclick="showProgressToast()">Progress Toast</button>
<button onclick="showAutoToast()">Auto-dismiss</button>
<button onclick="showCountdownToast()">Countdown Toast</button>

<!-- Toast containers with proper structure -->
<div class="toast-container position-fixed top-0 end-0 p-3">
  <div id="progressToast" class="toast">
    <!-- Progress toast structure -->
  </div>
  <div id="autoToast" class="toast">
    <!-- Auto-dismiss toast structure -->
  </div>
  <div id="countdownToast" class="toast">
    <!-- Countdown toast structure -->
  </div>
</div>`}
              cssCode={`.progress {
    transition: width 0.3s ease;
}
.toast {
    min-width: 300px;
}`}
              jsCode={`<script>
function showProgressToast() {
    const toast = new bootstrap.Toast(document.getElementById('progressToast'));
    toast.show();

    let progress = 0;
    const interval = setInterval(() => {
        progress += Math.random() * 15 + 5;
        if (progress >= 100) {
            progress = 100;
            clearInterval(interval);
        }

        document.getElementById('progressBar').style.width = progress + '%';
        document.getElementById('progressPercent').textContent = Math.round(progress) + '%';

        if (progress === 100) {
            setTimeout(() => toast.hide(), 1000);
        }
    }, 300);
}

function showAutoToast() {
    const toast = new bootstrap.Toast(document.getElementById('autoToast'));
    toast.show();
}

function showCountdownToast() {
    const toast = new bootstrap.Toast(document.getElementById('countdownToast'));
    toast.show();

    let seconds = 10;
    const interval = setInterval(() => {
        seconds--;
        document.getElementById('countdownDisplay').textContent = seconds;
        document.getElementById('countdownTime').textContent = seconds + 's';

        if (seconds <= 0) {
            clearInterval(interval);
            toast.hide();
        }
    }, 1000);
}
</script>`}
            />
          </div>

          <!-- Developer Tips and Best Practices -->
          <div class="my-3">
            <h3 id="developer-tips">Developer Tips & Best Practices</h3>
            <div class="alert alert-info">
              <h4 class="alert-heading">
                <i class="ri-lightbulb-line me-2"></i>
                Pro Tips for Toast Notifications
              </h4>
              <ul class="mb-0">
                <li>
                  <strong>Timing & Auto-dismiss:</strong> Use appropriate auto-dismiss timers - 3-5 seconds
                  for success messages, longer for important warnings
                </li>
                <li>
                  <strong>Position Strategy:</strong> Place toasts in consistent locations (top-right
                  or bottom-right) to build user expectations
                </li>
                <li>
                  <strong>Content Hierarchy:</strong> Use clear, concise messaging with appropriate icons
                  and colors to convey urgency and context
                </li>
                <li>
                  <strong>Stacking Limits:</strong> Limit visible toasts to 3-5 maximum to prevent screen
                  clutter and cognitive overload
                </li>
                <li>
                  <strong>Action Integration:</strong> Include relevant action buttons for actionable
                  notifications (retry, undo, view details)
                </li>
                <li>
                  <strong>Responsive Behavior:</strong> Ensure toasts work well on mobile devices with
                  appropriate sizing and positioning
                </li>
              </ul>
            </div>

            <div class="alert alert-warning">
              <h4 class="alert-heading">
                <i class="ri-error-warning-line me-2"></i>
                Common Pitfalls to Avoid
              </h4>
              <ul class="mb-0">
                <li>
                  Don't use toasts for critical information that users must see - use modals or
                  inline alerts instead
                </li>
                <li>
                  Avoid overly complex or lengthy content in toasts - keep messages brief and
                  actionable
                </li>
                <li>
                  Never auto-dismiss error messages - users need time to read and understand
                  problems
                </li>
                <li>
                  Don't stack too many toasts simultaneously - implement a queue system for better
                  UX
                </li>
                <li>
                  Avoid using toasts for form validation errors - use inline validation instead
                </li>
                <li>
                  Don't forget to handle focus management and screen reader announcements for
                  accessibility
                </li>
              </ul>
            </div>

            <div class="alert alert-success">
              <h4 class="alert-heading">
                <i class="ri-code-s-slash-line me-2"></i>
                JavaScript Integration Best Practices
              </h4>
              <p class="mb-2">Essential features for production toast systems:</p>
              <div class="bg-light p-3 rounded">
                <strong>Toast Manager Features:</strong>
                <ul class="mb-0 mt-2">
                  <li>Queue management system for multiple notifications</li>
                  <li>Auto-dismiss timers with pause on hover functionality</li>
                  <li>Progress indicators for long-running operations</li>
                  <li>Theme and position customization options</li>
                  <li>Keyboard navigation and focus management</li>
                  <li>Integration with application state management</li>
                </ul>
              </div>
            </div>
          </div>

          <div class="my-3">
            <h3 class="mb-0" id="accessibility-guidelines">Accessibility Guidelines</h3>
            <p class="py-2">
              Ensure toast notifications are accessible to all users by following these best
              practices:
            </p>
            <ul class="list-unstyled ps-3">
              <li>
                <i class="ri-check-line text-success me-2"></i>Use proper ARIA attributes:
                role="alert", aria-live="assertive", aria-atomic="true"
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Provide sufficient color contrast for
                all text and background combinations
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Include descriptive text that works
                without relying solely on color or icons
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Ensure keyboard navigation works for
                dismissing and interacting with toasts
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Implement proper focus management
                when toasts appear and disappear
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Use appropriate timing that allows
                users to read and understand content
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Provide alternative methods for
                critical information beyond just toasts
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
