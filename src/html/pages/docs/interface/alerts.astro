---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with navigation breadcrumbs
const pageHeaderConfig = {
  title: 'Alerts',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Alerts', class: 'active' }
  ]
}

// Basic contextual alert examples with different states
const contextualAlertExamples = `<div class="alert alert-primary" role="alert">
  <i class="ri-information-line me-2"></i><strong>Primary Alert:</strong> Important system update available!
</div>
<div class="alert alert-secondary" role="alert">
  <i class="ri-file-list-line me-2"></i><strong>Secondary Alert:</strong> Additional information for your reference.
</div>
<div class="alert alert-success" role="alert">
  <i class="ri-check-line me-2"></i><strong>Success!</strong> Your changes have been saved successfully.
</div>
<div class="alert alert-danger" role="alert">
  <i class="ri-error-warning-line me-2"></i><strong>Error!</strong> Unable to process your request. Please try again.
</div>
<div class="alert alert-warning" role="alert">
  <i class="ri-alarm-warning-line me-2"></i><strong>Warning!</strong> Your session will expire in 5 minutes.
</div>
<div class="alert alert-info" role="alert">
  <i class="ri-calendar-event-line me-2"></i><strong>Info:</strong> Scheduled maintenance on Sunday at 2 AM UTC.
</div>
<div class="alert alert-light" role="alert">
  <i class="ri-lightbulb-line me-2"></i><strong>Note:</strong> Light alert for subtle notifications.
</div>
<div class="alert alert-dark" role="alert">
  <i class="ri-flag-line me-2"></i><strong>Important:</strong> Dark alert for high-contrast messages.
</div>`

// Alert examples with interactive links
const alertWithLinkExamples = `<div class="alert alert-primary alert-dismissible fade show" role="alert">
  <i class="ri-question-line me-2"></i>Need help? Check our <a href="#" class="alert-link">documentation guide</a> for detailed instructions.
</div>
<div class="alert alert-secondary" role="alert">
  <i class="ri-file-text-line me-2"></i>View our <a href="#" class="alert-link">terms of service</a> for more information.
</div>
<div class="alert alert-success" role="alert">
  <i class="ri-user-follow-line me-2"></i>Account verified! <a href="#" class="alert-link">Complete your profile</a> to get started.
</div>
<div class="alert alert-danger" role="alert">
  <i class="ri-bank-card-line me-2"></i>Payment failed. <a href="#" class="alert-link">Update payment method</a> to continue service.
</div>
<div class="alert alert-warning" role="alert">
  <i class="ri-chrome-line me-2"></i>Browser update required. <a href="#" class="alert-link">Install latest version</a> for better security.
</div>
<div class="alert alert-info" role="alert">
  <i class="ri-notification-3-line me-2"></i>New features available! <a href="#" class="alert-link">View changelog</a> to learn more.
</div>
<div class="alert alert-light" role="alert">
  <i class="ri-mail-line me-2"></i>Subscribe to our <a href="#" class="alert-link">newsletter</a> for weekly updates.
</div>
<div class="alert alert-dark" role="alert">
  <i class="ri-group-line me-2"></i>Join our <a href="#" class="alert-link">community forum</a> for discussions and support.
</div>`

// Rich content alert example with structured information
const richContentAlertExample = `<div class="alert alert-success" role="alert">
  <h4 class="alert-heading js-toc-ignore"><i class="ri-award-line me-2"></i>Project Milestone Achieved! ðŸŽ‰</h4>
  <p>
    Congratulations on completing this phase of the project! Your team has successfully delivered all required deliverables ahead of schedule.
  </p>
  <hr>
  <div class="d-flex justify-content-between align-items-center mb-2">
    <strong>Key Achievements:</strong>
    <span class="badge bg-success">Sprint Goals Met</span>
  </div>
  <ul class="mb-2">
    <li><i class="ri-checkbox-circle-line me-1"></i> 100% test coverage achieved</li>
    <li><i class="ri-speed-up-line me-1"></i> Performance benchmarks exceeded</li>
    <li><i class="ri-file-paper-2-line me-1"></i> Documentation completed</li>
    <li><i class="ri-user-voice-line me-1"></i> Stakeholder feedback incorporated</li>
  </ul>
  <p class="mb-0">
    <i class="ri-calendar-todo-line me-1"></i> The next sprint planning meeting is scheduled for tomorrow at 10 AM.
  </p>
</div>`

// Dismissible alert examples with enhanced content and icons
const dismissibleAlertExamples = `<div class="alert alert-warning alert-dismissible fade show" role="alert">
  <div class="d-flex align-items-center">
    <i class="ri-alert-line fs-5 me-3"></i>
    <div>
      <strong>Attention Required!</strong>
      <p class="mb-0">Please review and update your security settings before continuing.</p>
      <div class="mt-2">
        <a href="#" class="btn btn-sm btn-warning">Review Settings</a>
        <a href="#" class="btn btn-sm btn-outline-warning ms-2">Learn More</a>
      </div>
    </div>
  </div>
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
  <div class="d-flex">
    <i class="ri-lightbulb-flash-line fs-5 me-3"></i>
    <div>
      <strong>Quick Tip:</strong>
      <p class="mb-0">You can customize alert animations and timing through JavaScript.</p>
      <div class="mt-2">
        <code>$('.alert').alert('close')</code> - Closes an alert by removing it from the DOM
      </div>
    </div>
  </div>
  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>`

// Alert with custom border and icon positioning
const customStyledAlertExamples = `<div class="alert alert-primary border-0 border-start border-5 border-primary d-flex align-items-center ps-2" role="alert">
  <div class="bg-primary bg-opacity-25 p-2 me-3 rounded">
    <i class="ri-shield-check-line text-primary fs-4"></i>
  </div>
  <div>
    <strong>Security Update:</strong> Your account has been protected with enhanced security measures.
  </div>
</div>

<div class="alert alert-success border-0 border-start border-5 border-success d-flex align-items-center ps-2" role="alert">
  <div class="bg-success bg-opacity-25 p-2 me-3 rounded">
    <i class="ri-check-double-line text-success fs-4"></i>
  </div>
  <div>
    <strong>Task Completed:</strong> All items in your workflow have been processed successfully.
  </div>
</div>

<div class="alert alert-danger border-0 border-start border-5 border-danger d-flex align-items-center ps-2" role="alert">
  <div class="bg-danger bg-opacity-25 p-2 me-3 rounded">
    <i class="ri-close-circle-line text-danger fs-4"></i>
  </div>
  <div>
    <strong>Critical Error:</strong> Unable to connect to the server. Please check your connection.
  </div>
</div>

<div class="alert alert-warning border-0 border-start border-5 border-warning d-flex align-items-center ps-2" role="alert">
  <div class="bg-warning bg-opacity-25 p-2 me-3 rounded">
    <i class="ri-alert-line text-warning fs-4"></i>
  </div>
  <div>
    <strong>Attention Required:</strong> Your subscription will expire in 3 days. Please renew now.
  </div>
</div>`

// Live alert example with JavaScript interaction
const liveAlertExample = `<div id="liveAlertPlaceholder" class="mb-3"></div>
<div class="d-flex gap-2 flex-wrap">
  <button type="button" class="btn btn-success btn-sm" onclick="showAlert('Data saved successfully!', 'success', 'ri-check-line')">
    <i class="ri-check-line me-1"></i>Success Alert
  </button>
  <button type="button" class="btn btn-danger btn-sm" onclick="showAlert('Failed to process request. Please try again.', 'danger', 'ri-error-warning-line')">
    <i class="ri-error-warning-line me-1"></i>Error Alert
  </button>
  <button type="button" class="btn btn-warning btn-sm" onclick="showAlert('Your session will expire in 5 minutes.', 'warning', 'ri-time-line')">
    <i class="ri-time-line me-1"></i>Warning Alert
  </button>
  <button type="button" class="btn btn-info btn-sm" onclick="showAlert('New update available! Click to learn more.', 'info', 'ri-information-line')">
    <i class="ri-information-line me-1"></i>Info Alert
  </button>
  <button type="button" class="btn btn-secondary btn-sm" onclick="clearAllAlerts()">
    <i class="ri-delete-bin-line me-1"></i>Clear All
  </button>
</div>`

// JavaScript code for the live alert example
const liveAlertJsCode = `<script>
const alertPlaceholder = document.getElementById('liveAlertPlaceholder');

function showAlert(message, type, iconClass = 'ri-information-line') {
  const alertId = 'alert-' + Date.now();
  const wrapper = document.createElement('div');
  wrapper.innerHTML = [
    '<div id="' + alertId + '" class="alert alert-' + type + ' alert-dismissible fade show" role="alert">',
    '   <div class="d-flex align-items-center">',
    '     <i class="' + iconClass + ' me-2"></i>',
    '     <span>' + message + '</span>',
    '   </div>',
    '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
    '</div>'
  ].join('');

  alertPlaceholder.appendChild(wrapper);

  // Auto-dismiss after 5 seconds
  setTimeout(() => {
    const alertElement = document.getElementById(alertId);
    if (alertElement) {
      const bsAlert = new bootstrap.Alert(alertElement);
      bsAlert.close();
    }
  }, 5000);
}

function clearAllAlerts() {
  const alerts = alertPlaceholder.querySelectorAll('.alert');
  alerts.forEach(alert => {
    const bsAlert = new bootstrap.Alert(alert);
    bsAlert.close();
  });
}

// Example of programmatically showing an alert on page load
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(() => {
    showAlert('Welcome! This demo shows dynamic alert creation.', 'primary', 'ri-star-line');
  }, 1000);
});
</script>`

// Notification style alerts with user interaction elements
const notificationAlertExamples = `<div class="alert alert-primary border-0 d-flex align-items-center" role="alert">
  <div class="me-3">
    <div class="avatar avatar-sm">
      <img src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face" alt="User" class="avatar-img rounded-circle">
    </div>
  </div>
  <div class="flex-grow-1">
    <div class="d-flex justify-content-between align-items-start">
      <div>
        <strong>John Smith</strong> mentioned you in a comment
        <div class="text-muted small mt-1">
          <i class="ri-time-line me-1"></i>2 minutes ago
        </div>
      </div>
      <div class="d-flex gap-1">
        <button class="btn btn-sm btn-outline-primary">Reply</button>
        <button class="btn btn-sm btn-outline-secondary">Mark Read</button>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-success border-0 d-flex align-items-center" role="alert">
  <div class="me-3">
    <div class="bg-success bg-opacity-25 p-2 rounded-circle">
      <i class="ri-check-line text-success"></i>
    </div>
  </div>
  <div class="flex-grow-1">
    <div class="d-flex justify-content-between align-items-start">
      <div>
        <strong>Payment Processed</strong>
        <div class="text-muted small mt-1">
          Invoice #12345 - $299.00 charged to â€¢â€¢â€¢â€¢ 4242
        </div>
      </div>
      <div>
        <button class="btn btn-sm btn-outline-success">View Receipt</button>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-warning border-0 d-flex align-items-center" role="alert">
  <div class="me-3">
    <div class="bg-warning bg-opacity-25 p-2 rounded-circle">
      <i class="ri-shield-line text-warning"></i>
    </div>
  </div>
  <div class="flex-grow-1">
    <div class="d-flex justify-content-between align-items-start">
      <div>
        <strong>Security Alert</strong>
        <div class="text-muted small mt-1">
          New login from Chrome on Windows â€¢ San Francisco, CA
        </div>
      </div>
      <div class="d-flex gap-1">
        <button class="btn btn-sm btn-warning">Secure Account</button>
        <button class="btn btn-sm btn-outline-warning">Not Me</button>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-info border-0 d-flex align-items-center" role="alert">
  <div class="me-3">
    <div class="bg-info bg-opacity-25 p-2 rounded-circle">
      <i class="ri-gift-line text-info"></i>
    </div>
  </div>
  <div class="flex-grow-1">
    <div class="d-flex justify-content-between align-items-start">
      <div>
        <strong>Team Milestone Reached!</strong>
        <div class="text-muted small mt-1">
          Your team completed 100 tasks this month
        </div>
      </div>
      <div>
        <button class="btn btn-sm btn-info">Celebrate</button>
      </div>
    </div>
  </div>
</div>`

// Progress and status alerts with interactive elements
const progressAlertExamples = `<div class="alert alert-primary" role="alert">
  <div class="d-flex justify-content-between align-items-center mb-2">
    <div class="d-flex align-items-center">
      <i class="ri-upload-cloud-2-line me-2"></i>
      <strong>Uploading Files</strong>
    </div>
    <small class="text-muted">3 of 8 files</small>
  </div>
  <div class="progress mb-2" style="height: 8px;">
    <div class="progress-bar" role="progressbar" style="width: 37.5%"></div>
  </div>
  <div class="d-flex justify-content-between">
    <small class="text-muted">presentation.pdf (2.1 MB)</small>
    <small class="text-muted">37% complete</small>
  </div>
</div>

<div class="alert alert-success" role="alert">
  <div class="d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
      <i class="ri-task-line me-2"></i>
      <div>
        <strong>Task Completed</strong>
        <div class="text-muted small">Database backup finished successfully</div>
      </div>
    </div>
    <div class="d-flex align-items-center gap-2">
      <span class="badge bg-success">Complete</span>
      <button class="btn btn-sm btn-outline-success">View Log</button>
    </div>
  </div>
</div>

<div class="alert alert-warning" role="alert">
  <div class="d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
      <i class="ri-time-line me-2"></i>
      <div>
        <strong>Process Running</strong>
        <div class="text-muted small">Data synchronization in progress...</div>
      </div>
    </div>
    <div class="d-flex align-items-center gap-2">
      <span class="badge bg-warning">Running</span>
      <div class="spinner-border spinner-border-sm" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-danger" role="alert">
  <div class="d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
      <i class="ri-error-warning-line me-2"></i>
      <div>
        <strong>Process Failed</strong>
        <div class="text-muted small">Email delivery failed after 3 attempts</div>
      </div>
    </div>
    <div class="d-flex align-items-center gap-2">
      <span class="badge bg-danger">Failed</span>
      <button class="btn btn-sm btn-danger">Retry</button>
    </div>
  </div>
</div>`

// System and admin alerts for technical interfaces
const systemAlertExamples = `<div class="alert alert-success border-0 border-start border-4 border-success" role="alert">
  <div class="d-flex align-items-start">
    <i class="ri-server-line fs-5 me-3 text-success"></i>
    <div class="flex-grow-1">
      <div class="d-flex justify-content-between align-items-center">
        <strong>Server Status: Healthy</strong>
        <span class="badge bg-success-subtle text-success">Online</span>
      </div>
      <div class="mt-2 text-muted small">
        <div class="row">
          <div class="col-sm-6">CPU: 23% â€¢ Memory: 67%</div>
          <div class="col-sm-6">Uptime: 14 days, 6 hours</div>
        </div>
      </div>
      <div class="mt-2">
        <a href="#" class="btn btn-sm btn-outline-success me-2">View Metrics</a>
        <a href="#" class="btn btn-sm btn-outline-secondary">Server Logs</a>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-warning border-0 border-start border-4 border-warning" role="alert">
  <div class="d-flex align-items-start">
    <i class="ri-tools-line fs-5 me-3 text-warning"></i>
    <div class="flex-grow-1">
      <div class="d-flex justify-content-between align-items-center">
        <strong>Scheduled Maintenance</strong>
        <span class="badge bg-warning-subtle text-warning">Planned</span>
      </div>
      <div class="mt-2 text-muted small">
        <div>Database maintenance window: Sunday 2:00 AM - 4:00 AM UTC</div>
        <div>Expected downtime: ~30 minutes</div>
      </div>
      <div class="mt-2">
        <a href="#" class="btn btn-sm btn-warning me-2">Subscribe to Updates</a>
        <a href="#" class="btn btn-sm btn-outline-warning">View Schedule</a>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-danger border-0 border-start border-4 border-danger" role="alert">
  <div class="d-flex align-items-start">
    <i class="ri-shield-cross-line fs-5 me-3 text-danger"></i>
    <div class="flex-grow-1">
      <div class="d-flex justify-content-between align-items-center">
        <strong>Security Incident Detected</strong>
        <span class="badge bg-danger-subtle text-danger">Critical</span>
      </div>
      <div class="mt-2 text-muted small">
        <div>Multiple failed login attempts from IP: 192.168.1.100</div>
        <div>Last attempt: 2 minutes ago</div>
      </div>
      <div class="mt-2">
        <a href="#" class="btn btn-sm btn-danger me-2">Block IP</a>
        <a href="#" class="btn btn-sm btn-outline-danger">View Details</a>
      </div>
    </div>
  </div>
</div>

<div class="alert alert-info border-0 border-start border-4 border-info" role="alert">
  <div class="d-flex align-items-start">
    <i class="ri-download-cloud-2-line fs-5 me-3 text-info"></i>
    <div class="flex-grow-1">
      <div class="d-flex justify-content-between align-items-center">
        <strong>System Update Available</strong>
        <span class="badge bg-info-subtle text-info">v2.4.1</span>
      </div>
      <div class="mt-2 text-muted small">
        <div>New features, security patches, and performance improvements</div>
        <div>Release date: March 15, 2024</div>
      </div>
      <div class="mt-2">
        <a href="#" class="btn btn-sm btn-info me-2">Install Update</a>
        <a href="#" class="btn btn-sm btn-outline-info">Release Notes</a>
      </div>
    </div>
  </div>
</div>`

// Shared preview configuration for consistent component display
const previewConfig = {
  cssCode: '',
  jsCode: ''
}
---

<AdminLayout
  title="Alerts"
  description="Interactive alert components for user notifications and feedback"
  currentPath="docs/interface/alerts"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderConfig} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Alerts are versatile UI components designed to deliver important feedback,
            notifications, and status messages to users. They provide contextual visual cues through
            color, icons, and content structure to effectively communicate different types of
            information. Well-designed alerts help guide users, prevent errors, and enhance the
            overall user experience by providing timely and relevant information.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="examples">Contextual Alerts</h3>
            <p class="py-2">
              Choose from eight contextual alert styles to convey different message types. Each
              style provides distinct visual cues through color and icons, helping users quickly
              understand the nature and importance of the message. Use <code>alert-primary</code>, <code
                >alert-success</code
              >, etc. classes to apply different styles based on the message context:
              <ul class="mt-2">
                <li><strong>Primary/Secondary:</strong> General information and system messages</li>
                <li>
                  <strong>Success:</strong> Confirmation of completed actions or positive outcomes
                </li>
                <li>
                  <strong>Danger:</strong> Critical errors, failures, or actions requiring immediate
                  attention
                </li>
                <li><strong>Warning:</strong> Potential issues or actions requiring caution</li>
                <li><strong>Info:</strong> Helpful information, tips, or announcements</li>
                <li><strong>Light/Dark:</strong> Subtle notifications or high-contrast messages</li>
              </ul>
            </p>

            <ComponentPreview
              title="Contextual Alert Examples"
              height="550px"
              component={contextualAlertExamples}
              htmlCode={contextualAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="link-color">Interactive Alerts</h3>
            <p class="py-2">
              Enhance alerts with interactive elements using the <code>.alert-link</code> class. This
              maintains consistent styling while providing clear call-to-action opportunities within
              your alerts. Links automatically inherit the alert's color scheme for seamless integration,
              creating a cohesive visual experience while enabling users to take immediate action based
              on the notification.
            </p>

            <ComponentPreview
              title="Alerts with Interactive Links"
              height="550px"
              component={alertWithLinkExamples}
              htmlCode={alertWithLinkExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="additional-content">Rich Content Alerts</h3>
            <p class="py-2">
              Create more engaging and informative alerts by incorporating rich content such as
              headings, lists, badges, and icons. These elements help structure information
              hierarchically and highlight key details within the alert context. Rich content alerts
              are particularly useful for complex notifications that require more explanation or
              contain multiple pieces of related information.
            </p>

            <ComponentPreview
              title="Rich Content Alert Example"
              height="550px"
              component={richContentAlertExample}
              htmlCode={richContentAlertExample}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="dismissing">Dismissible Alerts</h3>
            <p class="py-2">
              Add the <code>alert-dismissible</code> class and dismiss button to create closeable alerts.
              These are perfect for temporary notifications that users can acknowledge and remove when
              no longer needed. Include the <code>fade</code> and <code>show</code> classes for smooth
              transition effects. Dismissible alerts give users control over their interface while ensuring
              important messages are seen.
            </p>

            <ComponentPreview
              title="Dismissible Alert Examples"
              height="550px"
              component={dismissibleAlertExamples}
              htmlCode={dismissibleAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="live-alert">Live Alert Example</h3>
            <p class="py-2">
              Create dynamic alerts that respond to user interactions using JavaScript. This example
              demonstrates how to show an alert (hidden initially) when a button is clicked, then
              dismiss it with the built-in close button. This pattern is useful for providing
              feedback after user actions without requiring a page refresh.
            </p>

            <ComponentPreview
              title="Live Alert Example"
              height="550px"
              component={liveAlertExample}
              htmlCode={liveAlertExample}
              jsCode={liveAlertJsCode}
              cssCode=""
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="custom-styled">Custom Styled Alerts</h3>
            <p class="py-2">
              Create visually distinctive alerts by combining utility classes with the base alert
              component. This example demonstrates alerts with left borders, custom icon containers,
              and enhanced visual hierarchy. Custom styling can help establish different levels of
              importance or categorize alerts within your interface while maintaining accessibility
              and usability.
            </p>

            <ComponentPreview
              title="Custom Styled Alert Examples"
              height="550px"
              component={customStyledAlertExamples}
              htmlCode={customStyledAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="notification-alerts">Notification Style Alerts</h3>
            <p class="py-2">
              Create notification-style alerts that mimic modern app notifications. These alerts are
              perfect for status updates, system messages, and user-to-user communications. They
              feature profile images, timestamps, and action buttons for enhanced user interaction.
            </p>

            <ComponentPreview
              title="Notification Style Alerts"
              height="550px"
              component={notificationAlertExamples}
              htmlCode={notificationAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="progress-alerts">Progress & Status Alerts</h3>
            <p class="py-2">
              Combine alerts with progress indicators and status badges to show ongoing processes,
              completion states, and multi-step workflows. These alerts are ideal for file uploads,
              data processing, and task management interfaces.
            </p>

            <ComponentPreview
              title="Progress & Status Alerts"
              height="550px"
              component={progressAlertExamples}
              htmlCode={progressAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0 fs-2" id="system-alerts">System & Admin Alerts</h3>
            <p class="py-2">
              Professional alerts designed for admin interfaces and system monitoring. These include
              server status updates, maintenance notifications, performance warnings, and security
              alerts with technical details and action buttons.
            </p>

            <ComponentPreview
              title="System & Admin Alerts"
              height="550px"
              component={systemAlertExamples}
              htmlCode={systemAlertExamples}
              {...previewConfig}
            />
          </div>

          <div class="my-3">
            <h3 id="developer-tips">Developer Tips & Best Practices</h3>
            <div class="alert alert-info">
              <h4 class="alert-heading">
                <i class="ri-lightbulb-line me-2"></i>
                Pro Tips for Alerts
              </h4>
              <ul class="mb-0">
                <li>
                  <strong>Accessibility:</strong> Always include proper ARIA attributes and ensure sufficient
                  color contrast
                </li>
                <li>
                  <strong>Performance:</strong> Use event delegation for dynamically created alerts to
                  avoid memory leaks
                </li>
                <li>
                  <strong>UX:</strong> Provide clear, actionable messages and avoid technical jargon
                  in user-facing alerts
                </li>
                <li>
                  <strong>Timing:</strong> Auto-dismiss informational alerts but let users manually close
                  error/warning alerts
                </li>
                <li>
                  <strong>Positioning:</strong> Consider using toast notifications for non-blocking alerts
                </li>
                <li>
                  <strong>Icons:</strong> Use consistent iconography to help users quickly identify alert
                  types
                </li>
              </ul>
            </div>

            <div class="alert alert-warning">
              <h4 class="alert-heading">
                <i class="ri-error-warning-line me-2"></i>
                Common Pitfalls to Avoid
              </h4>
              <ul class="mb-0">
                <li>Don't show too many alerts simultaneously - it overwhelms users</li>
                <li>
                  Avoid using alerts for non-essential information that doesn't require immediate
                  attention
                </li>
                <li>
                  Don't auto-dismiss critical error alerts - users need time to read and act on them
                </li>
                <li>Never use alerts as the primary method for important feature announcements</li>
                <li>Don't forget to handle keyboard navigation for dismissible alerts</li>
                <li>Avoid nested alerts or alerts within modals unless absolutely necessary</li>
              </ul>
            </div>

            <div class="alert alert-success">
              <h4 class="alert-heading">
                <i class="ri-code-s-slash-line me-2"></i>
                JavaScript Integration Example
              </h4>
              <p class="mb-2">Here's a reusable alert manager class for your projects:</p>
              <pre><code>{`class AlertManager {
  constructor(containerId = 'alertContainer') {
    this.container = document.getElementById(containerId) || document.body;
    this.alertQueue = [];
    this.maxAlerts = 3;
  }

  show(message, type = 'info', options = {}) {
    const alertConfig = {
      id: 'alert-' + Date.now(),
      message,
      type,
      icon: options.icon || this.getDefaultIcon(type),
      dismissible: options.dismissible !== false,
      autoClose: options.autoClose !== false,
      duration: options.duration || 5000
    };

    if (this.alertQueue.length >= this.maxAlerts) {
      this.dismissOldest();
    }

    this.createAlert(alertConfig);
    this.alertQueue.push(alertConfig);
  }

  getDefaultIcon(type) {
    const icons = {
      success: 'ri-check-line',
      danger: 'ri-error-warning-line',
      warning: 'ri-alarm-warning-line',
      info: 'ri-information-line',
      primary: 'ri-notification-3-line'
    };
    return icons[type] || 'ri-information-line';
  }

  createAlert(config) {
    const wrapper = document.createElement('div');
    wrapper.innerHTML = \`
      <div id="\${config.id}" class="alert alert-\${config.type} alert-dismissible fade show" role="alert">
        <div class="d-flex align-items-center">
          <i class="\${config.icon} me-2"></i>
          <span>\${config.message}</span>
        </div>
        \${config.dismissible ? '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' : ''}
      </div>
    \`;

    this.container.appendChild(wrapper);

    if (config.autoClose) {
      setTimeout(() => this.dismiss(config.id), config.duration);
    }
  }

  dismiss(alertId) {
    const alertElement = document.getElementById(alertId);
    if (alertElement) {
      new bootstrap.Alert(alertElement).close();
      this.alertQueue = this.alertQueue.filter(alert => alert.id !== alertId);
    }
  }

  dismissAll() {
    this.alertQueue.forEach(alert => this.dismiss(alert.id));
  }
}`}</code></pre>
            </div>
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
