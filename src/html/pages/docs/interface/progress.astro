---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

const pageHeaderProps = {
  title: 'Progress',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Progress', class: 'active' }
  ]
}

// Basic progress bar examples with different completion percentages
const basicProgressExamples = `<div class="progress mb-3" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 0%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Basic example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 25%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Basic example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 50%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 75%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Basic example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 100%"></div>
</div>
`

// Example using utility class for width
const utilityWidthExample = `<div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar w-75"></div>
</div>
`

// Examples with different height variations
const heightVariationExamples = `<div class="progress mb-3" role="progressbar" aria-label="Example 1px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 1px">
  <div class="progress-bar" style="width: 25%"></div>
</div>
<div class="progress" role="progressbar" aria-label="Example 20px high" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" style="height: 20px">
  <div class="progress-bar" style="width: 25%"></div>
</div>
`

// Example with basic label
const basicLabelExample = `<div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar" style="width: 25%">25%</div>
</div>
`

// Example with overflow label
const overflowLabelExample = `<div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar overflow-visible text-dark" style="width: 10%">
    <i class="ri-information-line me-1"></i>Processing data... (10% complete)
  </div>
</div>
`

// Examples with contextual colors
const contextualColorExamples = `<div class="progress mb-3" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar bg-success" style="width: 25%">
    <i class="ri-check-line me-1"></i>Success
  </div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Info example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar bg-info" style="width: 50%">
    <i class="ri-information-line me-1"></i>Info
  </div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Warning example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar bg-warning" style="width: 75%">
    <i class="ri-alert-line me-1"></i>Warning
  </div>
</div>
<div class="progress" role="progressbar" aria-label="Danger example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar bg-danger" style="width: 100%">
    <i class="ri-error-warning-line me-1"></i>Danger
  </div>
</div>
`

// Example with stacked progress bars
const stackedProgressExample = `<div class="progress-stacked">
  <div class="progress" role="progressbar" aria-label="Completed tasks" aria-valuenow="15" aria-valuemin="0" aria-valuemax="100" style="width: 15%">
    <div class="progress-bar">
      <i class="ri-check-double-line me-1"></i>Done
    </div>
  </div>
  <div class="progress" role="progressbar" aria-label="In progress tasks" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100" style="width: 30%">
    <div class="progress-bar bg-success">
      <i class="ri-time-line me-1"></i>In Progress
    </div>
  </div>
  <div class="progress" role="progressbar" aria-label="Pending tasks" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%">
    <div class="progress-bar bg-info">
      <i class="ri-loader-line me-1"></i>Pending
    </div>
  </div>
</div>
`

// Examples with striped variations
const stripedProgressExamples = `<div class="progress mb-3" role="progressbar" aria-label="Default striped example" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped" style="width: 10%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Success striped example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped bg-success" style="width: 25%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Info striped example" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped bg-info" style="width: 50%"></div>
</div>
<div class="progress mb-3" role="progressbar" aria-label="Warning striped example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped bg-warning" style="width: 75%"></div>
</div>
<div class="progress" role="progressbar" aria-label="Danger striped example" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped bg-danger" style="width: 100%"></div>
</div>
`

// Example with animated stripes
const animatedStripesExample = `<div class="progress" role="progressbar" aria-label="Animated striped example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 75%">
    <i class="ri-loader-4-line me-1"></i>Loading...
  </div>
</div>
`

// Example with gradient background
const gradientProgressExample = `<div class="progress" role="progressbar" aria-label="Gradient progress example" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100">
  <div class="progress-bar bg-gradient" style="width: 60%; background: linear-gradient(45deg, #12c2e9, #c471ed, #f64f59);">
    <i class="ri-palette-line me-1"></i>60%
  </div>
</div>
`
---

<AdminLayout
  title="Progress"
  description="Interactive progress indicators and loading states"
  currentPath="docs/interface/progress"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderProps} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Progress components are essential UI elements that provide visual feedback about ongoing
            processes, loading states, and task completion. They help users understand the current
            state of an operation and estimate remaining time, enhancing the overall user experience
            by maintaining transparency during time-consuming tasks.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="how-it-works">How it works</h3>
            <p class="py-2">
              Bootstrap's progress component creates an accessible progress bar using semantic HTML
              attributes. The <code>aria-valuenow</code> attribute indicates current progress, while
              the bar's width adjusts visually (from 0% to 100%). For accessibility, <code
                >aria-valuemin</code
              > and <code>aria-valuemax</code> define the progress range, and <code>aria-label</code
              > provides a descriptive label for screen readers.
            </p>

            <ComponentPreview
              title="Basic Progress Examples"
              height="250px"
              component={basicProgressExamples}
              htmlCode={basicProgressExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="bar-sizing">Bar sizing</h3>
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="width">Width</h3>
            <p class="py-2">
              Control the progress bar width using either inline styles (<code
                >style="width: X%"</code
              >) or Bootstrap's utility classes (<code>w-{25 | 50 | 75 | 100}</code>). The width
              represents the completion percentage of your process.
            </p>

            <ComponentPreview
              title="Width with Utility Class"
              height="100px"
              component={utilityWidthExample}
              htmlCode={utilityWidthExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="height">Height</h3>
            <p class="py-2">
              Customize the progress bar height by applying the <code>style="height"</code> property
              to the outer <code>progress</code> container. This allows you to create both subtle and
              prominent progress indicators.
            </p>

            <ComponentPreview
              title="Height Variations"
              height="150px"
              component={heightVariationExamples}
              htmlCode={heightVariationExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="labels">Labels</h3>
            <p class="py-2">
              Add labels inside progress bars to provide explicit progress information. Labels can
              include text, icons, or both to enhance visual communication.
            </p>

            <ComponentPreview
              title="Basic Label"
              height="100px"
              component={basicLabelExample}
              htmlCode={basicLabelExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              For longer labels, use <code>overflow-visible</code> to allow text to extend beyond the
              progress bar. The <code>text-dark</code> class ensures readability against lighter backgrounds.
            </p>

            <ComponentPreview
              title="Overflow Label with Icon"
              height="100px"
              component={overflowLabelExample}
              htmlCode={overflowLabelExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="backgrounds">Contextual Backgrounds</h3>
            <p class="py-2">
              Use Bootstrap's background utility classes (<code>bg-*</code>) to convey meaning
              through color. Each contextual class is paired with an appropriate icon for enhanced
              visual feedback.
            </p>

            <ComponentPreview
              title="Contextual Colors with Icons"
              height="200px"
              component={contextualColorExamples}
              htmlCode={contextualColorExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="multiple-bars">Multiple Bars</h3>
            <p class="py-2">
              Stack multiple progress bars using <code>progress-stacked</code> to show different aspects
              or stages of a process. Each segment can have its own style, width, and label.
            </p>

            <ComponentPreview
              title="Stacked Progress with Labels"
              height="100px"
              component={stackedProgressExample}
              htmlCode={stackedProgressExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="striped-bars">Striped Bars</h3>
            <p class="py-2">
              Add visual texture with <code>progress-bar-striped</code> class. Striped progress bars
              can help distinguish between different types of progress or draw attention to specific
              progress indicators.
            </p>

            <ComponentPreview
              title="Striped Progress Variations"
              height="200px"
              component={stripedProgressExamples}
              htmlCode={stripedProgressExamples}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="animated-stripes">Animated Stripes</h3>
            <p class="py-2">
              Combine <code>progress-bar-striped</code> and <code>progress-bar-animated</code> classes
              to create an animated effect, perfect for indicating active processes or loading states.
            </p>

            <ComponentPreview
              title="Animated Progress"
              height="100px"
              component={animatedStripesExample}
              htmlCode={animatedStripesExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="gradient-progress">Gradient Progress</h3>
            <p class="py-2">
              Create visually appealing progress bars using CSS gradients. This can add a modern
              touch to your progress indicators while maintaining functionality.
            </p>

            <ComponentPreview
              title="Gradient Progress Bar"
              height="100px"
              component={gradientProgressExample}
              htmlCode={gradientProgressExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
