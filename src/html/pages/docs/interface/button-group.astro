---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with navigation breadcrumbs
const pageHeaderConfig = {
  title: 'Button Group',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Button Group', class: 'active' }
  ]
}

// Standard button group example with default styling and icons
const standardButtonGroupExample = `<div class="btn-group" role="group" aria-label="Basic button group example">
  <button type="button" class="btn btn-primary"><i class="ri-home-line me-1"></i>Home</button>
  <button type="button" class="btn btn-primary"><i class="ri-user-line me-1"></i>Profile</button>
  <button type="button" class="btn btn-primary"><i class="ri-settings-line me-1"></i>Settings</button>
</div>`

// Button group with active state for indicating current selection
const activeStateButtonGroupExample = `<div class="btn-group">
  <button type="button" class="btn btn-primary active" aria-current="page">
    <i class="ri-list-check-2 me-1"></i>Active
  </button>
  <button type="button" class="btn btn-primary">
    <i class="ri-file-list-line me-1"></i>Documents
  </button>
  <button type="button" class="btn btn-primary">
    <i class="ri-folder-line me-1"></i>Files
  </button>
</div>`

// Button group with different contextual styles for various actions
const mixedStyleButtonGroupExample = `<div class="btn-group" role="group" aria-label="Mixed style buttons">
  <button type="button" class="btn btn-danger"><i class="ri-delete-bin-line me-1"></i>Delete</button>
  <button type="button" class="btn btn-warning"><i class="ri-alert-line me-1"></i>Warning</button>
  <button type="button" class="btn btn-success"><i class="ri-check-line me-1"></i>Approve</button>
</div>`

// Button group with outline styling for a more subtle appearance
const outlinedButtonGroupExample = `<div class="btn-group" role="group" aria-label="Outlined style buttons">
  <button type="button" class="btn btn-outline-primary"><i class="ri-edit-line me-1"></i>Edit</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-save-line me-1"></i>Save</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-close-line me-1"></i>Cancel</button>
</div>`

// Checkbox toggle button group for multiple selection options
const checkboxButtonGroupExample = `<div class="btn-group" role="group" aria-label="Checkbox toggle button group">
  <input type="checkbox" class="btn-check" id="btncheck1" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck1"><i class="ri-bold me-1"></i>Bold</label>

  <input type="checkbox" class="btn-check" id="btncheck2" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck2"><i class="ri-italic me-1"></i>Italic</label>

  <input type="checkbox" class="btn-check" id="btncheck3" autocomplete="off">
  <label class="btn btn-outline-primary" for="btncheck3"><i class="ri-underline me-1"></i>Underline</label>
</div>`

// Radio toggle button group for single selection options
const radioButtonGroupExample = `<div class="btn-group" role="group" aria-label="Radio toggle button group">
  <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
  <label class="btn btn-outline-primary" for="btnradio1"><i class="ri-align-left me-1"></i>Left</label>

  <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
  <label class="btn btn-outline-primary" for="btnradio2"><i class="ri-align-center me-1"></i>Center</label>

  <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
  <label class="btn btn-outline-primary" for="btnradio3"><i class="ri-align-right me-1"></i>Right</label>
</div>`

// Button toolbar example with multiple button groups for complex interfaces
const buttonToolbarExample = `<div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
  <div class="btn-group me-2" role="group" aria-label="First group">
    <button type="button" class="btn btn-danger"><i class="ri-file-line me-1"></i>1</button>
    <button type="button" class="btn btn-danger"><i class="ri-file-copy-line me-1"></i>2</button>
    <button type="button" class="btn btn-danger"><i class="ri-file-list-line me-1"></i>3</button>
  </div>
  <div class="btn-group me-2" role="group" aria-label="Second group">
    <button type="button" class="btn btn-warning"><i class="ri-folder-line me-1"></i>4</button>
    <button type="button" class="btn btn-warning"><i class="ri-folder-open-line me-1"></i>5</button>
  </div>
  <div class="btn-group" role="group" aria-label="Third group">
    <button type="button" class="btn btn-success"><i class="ri-settings-line me-1"></i>6</button>
  </div>
</div>`

// Button toolbar with input groups for combined functionality
const toolbarWithInputGroupExample = `<div class="btn-toolbar mb-2" role="toolbar" aria-label="Toolbar with button groups and input">
  <div class="btn-group me-2 pb-1" role="group" aria-label="Navigation group">
    <button type="button" class="btn btn-outline-secondary"><i class="ri-arrow-left-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-home-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-refresh-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-arrow-right-line"></i></button>
  </div>
  <div class="input-group pb-1">
    <div class="input-group-text" id="btnGroupAddon"><i class="ri-search-line"></i></div>
    <input type="text" class="form-control" placeholder="Search..." aria-label="Search input" aria-describedby="btnGroupAddon">
  </div>
</div>

<div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with justified content">
  <div class="btn-group pb-1" role="group" aria-label="Media controls">
    <button type="button" class="btn btn-outline-secondary"><i class="ri-skip-back-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-play-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-pause-line"></i></button>
    <button type="button" class="btn btn-outline-secondary"><i class="ri-skip-forward-line"></i></button>
  </div>
  <div class="input-group pb-1">
    <div class="input-group-text" id="btnGroupAddon2"><i class="ri-volume-up-line"></i></div>
    <input type="text" class="form-control" placeholder="Volume" aria-label="Volume control" aria-describedby="btnGroupAddon2">
  </div>
</div>`

// Size variations for button groups from extra large to extra small
const buttonGroupSizeVariationsExample = `<div class="btn-group btn-group-xl mb-2" role="group" aria-label="Extra large button group">
  <button type="button" class="btn btn-outline-primary"><i class="ri-layout-grid-line me-1"></i>Grid</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-layout-row-line me-1"></i>Row</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-layout-column-line me-1"></i>Column</button>
</div>
<br>
<div class="btn-group btn-group-lg mb-2" role="group" aria-label="Large button group">
  <button type="button" class="btn btn-outline-primary"><i class="ri-file-line me-1"></i>File</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-folder-line me-1"></i>Folder</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-archive-line me-1"></i>Archive</button>
</div>
<br>
<div class="btn-group mb-2" role="group" aria-label="Default button group">
  <button type="button" class="btn btn-outline-primary"><i class="ri-cut-line me-1"></i>Cut</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-file-copy-line me-1"></i>Copy</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-clipboard-line me-1"></i>Paste</button>
</div>
<br>
<div class="btn-group btn-group-sm mb-2" role="group" aria-label="Small button group">
  <button type="button" class="btn btn-outline-primary"><i class="ri-bold me-1"></i>B</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-italic me-1"></i>I</button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-underline me-1"></i>U</button>
</div>
<br>
<div class="btn-group btn-group-xs mb-2" role="group" aria-label="Extra small button group">
  <button type="button" class="btn btn-outline-primary"><i class="ri-add-line"></i></button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-subtract-line"></i></button>
  <button type="button" class="btn btn-outline-primary"><i class="ri-close-line"></i></button>
</div>`

// Nested dropdown example for advanced button group functionality
const nestedDropdownButtonGroupExample = `<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
  <button type="button" class="btn btn-primary"><i class="ri-file-line me-1"></i>File</button>
  <button type="button" class="btn btn-primary"><i class="ri-edit-line me-1"></i>Edit</button>

  <div class="btn-group" role="group">
    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
      <i class="ri-more-2-fill me-1"></i>More
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#"><i class="ri-settings-line me-2"></i>Settings</a></li>
      <li><a class="dropdown-item" href="#"><i class="ri-user-settings-line me-2"></i>Profile</a></li>
    </ul>
  </div>
</div>`

// Vertical button group for vertical layouts
const verticalButtonGroupExample = `<div class="btn-group-vertical" role="group" aria-label="Vertical button group">
  <button type="button" class="btn btn-primary text-start"><i class="ri-home-line me-2"></i>Home</button>
  <button type="button" class="btn btn-primary text-start"><i class="ri-user-line me-2"></i>Profile</button>
  <button type="button" class="btn btn-primary text-start"><i class="ri-settings-line me-2"></i>Settings</button>
  <button type="button" class="btn btn-primary text-start"><i class="ri-notification-line me-2"></i>Notifications</button>
</div>`

// Vertical button group with dropdowns for complex vertical menus
const verticalDropdownButtonGroupExample = `<div class="btn-group-vertical" role="group" aria-label="Vertical button group with dropdowns">
  <button type="button" class="btn btn-primary text-start"><i class="ri-dashboard-line me-2"></i>Dashboard</button>
  <button type="button" class="btn btn-primary text-start"><i class="ri-folder-line me-2"></i>Files</button>
  <div class="btn-group w-100" role="group">
    <button type="button" class="btn btn-primary text-start dropdown-toggle w-100" data-bs-toggle="dropdown" aria-expanded="false">
      <i class="ri-settings-line me-2"></i>Settings
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#"><i class="ri-user-settings-line me-2"></i>User Settings</a></li>
      <li><a class="dropdown-item" href="#"><i class="ri-global-line me-2"></i>System Settings</a></li>
    </ul>
  </div>
  <div class="btn-group w-100 dropup" role="group">
    <button type="button" class="btn btn-primary text-start dropdown-toggle w-100" data-bs-toggle="dropdown" aria-expanded="false">
      <i class="ri-more-2-fill me-2"></i>More Options
    </button>
    <ul class="dropdown-menu">
      <li><a class="dropdown-item" href="#"><i class="ri-information-line me-2"></i>About</a></li>
      <li><a class="dropdown-item" href="#"><i class="ri-question-line me-2"></i>Help</a></li>
    </ul>
  </div>
</div>`

// Vertical radio button group for vertical selection options
const verticalRadioButtonGroupExample = `<div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
  <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio1" autocomplete="off" checked>
  <label class="btn btn-outline-danger text-start" for="vbtn-radio1"><i class="ri-layout-top-line me-2"></i>Top</label>
  <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio2" autocomplete="off">
  <label class="btn btn-outline-danger text-start" for="vbtn-radio2"><i class="ri-layout-bottom-line me-2"></i>Bottom</label>
  <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio3" autocomplete="off">
  <label class="btn btn-outline-danger text-start" for="vbtn-radio3"><i class="ri-layout-right-line me-2"></i>Right</label>
</div>`
---

<AdminLayout
  title="Button Group"
  description="Interactive button group components with various styles and functionalities"
  currentPath="docs/interface/button-group"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderConfig} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Button groups are powerful UI components that combine multiple related buttons into a
            single, cohesive unit. They're perfect for creating toolbars, navigation sets, or any
            interface where multiple actions need to be visually connected. Button groups improve
            user experience by organizing related actions, reducing visual clutter, and providing
            clear interaction patterns for common tasks.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="examples">Basic Examples</h3>
            <p class="py-2">
              Create a basic button group using the <code>.btn-group</code> class to wrap a series of
              buttons. Each button maintains its individual styling while appearing as part of a unified
              set. Add the <code>role="group"</code> attribute and an appropriate <code
                >aria-label</code
              > to enhance accessibility. Remixicon icons enhance visual appeal and improve button recognition.
            </p>

            <ComponentPreview
              title="Standard Button Group"
              height="150px"
              component={standardButtonGroupExample}
              htmlCode={standardButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Use the <code>.active</code> class to highlight the currently selected button, and enhance
              accessibility with <code>aria-current="page"</code>. This visual feedback helps users
              understand their current context within the interface and indicates which option is
              currently selected or active.
            </p>

            <ComponentPreview
              title="Active State Button Group"
              height="150px"
              component={activeStateButtonGroupExample}
              htmlCode={activeStateButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="mixed-styles">Mixed Styles</h3>
            <p class="py-2">
              In a button group, buttons can be styled with different contextual color classes to
              represent distinct actions or statuses. This approach helps users quickly identify the
              purpose and importance of each button based on color semantics. For example, red
              typically indicates destructive actions, yellow for caution, and green for
              confirmation.
            </p>

            <ComponentPreview
              title="Mixed Style Button Group"
              height="150px"
              component={mixedStyleButtonGroupExample}
              htmlCode={mixedStyleButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="outlined-styles">Outlined Styles</h3>
            <p class="py-2">
              Button groups with outlined buttons use the <code>.btn-outline-*</code> classes to create
              a more subtle appearance with transparent backgrounds and colored borders. Outlined button
              groups are ideal for secondary actions, less prominent toolbars, or interfaces where you
              want to reduce visual weight while maintaining functionality.
            </p>

            <ComponentPreview
              title="Outlined Button Group"
              height="150px"
              component={outlinedButtonGroupExample}
              htmlCode={outlinedButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="checkbox-and-radio-buttons">Checkbox and Radio Buttons</h3>
            <p class="py-2">
              Transform checkboxes and radio inputs into toggle buttons within a button group to
              create intuitive selection interfaces. Use the <code>.btn-check</code> class to hide the
              default input appearance while maintaining functionality. Checkbox button groups allow
              multiple selections (like formatting options), while radio button groups enforce single
              selection (like alignment options).
            </p>

            <ComponentPreview
              title="Checkbox Button Group"
              height="150px"
              component={checkboxButtonGroupExample}
              htmlCode={checkboxButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />

            <ComponentPreview
              title="Radio Button Group"
              height="150px"
              component={radioButtonGroupExample}
              htmlCode={radioButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="button-toolbar">Button Toolbar</h3>
            <p class="py-2">
              Combine multiple button groups into a comprehensive toolbar using the <code
                >.btn-toolbar</code
              >
              class. Button toolbars organize related actions into logical groups, similar to application
              toolbars in desktop software. Add <code>role="toolbar"</code> and <code
                >aria-label</code
              >
              attributes to improve accessibility, and use margin utilities like <code>.me-2</code> to
              create proper spacing between button groups.
            </p>

            <ComponentPreview
              title="Button Toolbar Example"
              height="150px"
              component={buttonToolbarExample}
              htmlCode={buttonToolbarExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Button toolbars can be enhanced with input groups to create complex control
              interfaces. Use <code>.justify-content-between</code> to create space between groups, or
              combine with other flex utilities to achieve custom layouts. These examples demonstrate
              browser-like navigation controls and media player interfaces.
            </p>

            <ComponentPreview
              title="Button Toolbar with Input Groups"
              height="250px"
              component={toolbarWithInputGroupExample}
              htmlCode={toolbarWithInputGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="sizing">Size Variations</h3>
            <p class="py-2">
              Adjust button group sizes using the <code>.btn-group-xl</code>, <code
                >.btn-group-lg</code
              >,
              <code>.btn-group-sm</code>, and <code>.btn-group-xs</code> classes. Size variations help
              create visual hierarchy and adapt button groups to different interface contexts. Larger
              button groups work well for primary actions, while smaller sizes are suitable for compact
              toolbars or dense interfaces.
            </p>

            <ComponentPreview
              title="Button Group Size Variations"
              height="300px"
              component={buttonGroupSizeVariationsExample}
              htmlCode={buttonGroupSizeVariationsExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="nesting">Nested Dropdowns</h3>
            <p class="py-2">
              Create more complex button groups by nesting dropdown menus within them. This pattern
              is useful for interfaces with primary actions displayed as buttons and secondary
              actions hidden in a dropdown menu. The dropdown toggle button should be wrapped in its
              own
              <code>.btn-group</code> to maintain proper styling and behavior.
            </p>

            <ComponentPreview
              title="Button Group with Nested Dropdown"
              height="200px"
              component={nestedDropdownButtonGroupExample}
              htmlCode={nestedDropdownButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="vertical-variation">Vertical Variations</h3>
            <p class="py-2">
              Create vertical button stacks using the <code>.btn-group-vertical</code> class instead
              of
              <code>.btn-group</code>. Vertical button groups are ideal for side navigation, action
              panels, or interfaces where vertical space is more available than horizontal space.
              They maintain all the functionality of standard button groups but with a vertical
              orientation.
            </p>

            <ComponentPreview
              title="Vertical Button Group"
              height="250px"
              component={verticalButtonGroupExample}
              htmlCode={verticalButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Vertical button groups can also include dropdowns for more complex navigation
              structures. Note that for dropdowns at the bottom of a vertical group, use the <code
                >.dropup</code
              > class to ensure the menu opens in the correct direction.
            </p>

            <ComponentPreview
              title="Vertical Button Group with Dropdowns"
              height="250px"
              component={verticalDropdownButtonGroupExample}
              htmlCode={verticalDropdownButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />

            <p class="py-2">
              Radio buttons can also be arranged vertically, creating intuitive option selectors for
              settings or preferences that are better displayed in a vertical layout.
            </p>

            <ComponentPreview
              title="Vertical Radio Button Group"
              height="250px"
              component={verticalRadioButtonGroupExample}
              htmlCode={verticalRadioButtonGroupExample}
              cssCode={``}
              jsCode={``}
            />
          </div>

          <div class="my-3">
            <h3 class="mb-0" id="accessibility">Accessibility Considerations</h3>
            <p class="py-2">
              Ensure button groups are accessible to all users by following these best practices:
            </p>
            <ul class="list-unstyled ps-3">
              <li>
                <i class="ri-check-line text-success me-2"></i>Use <code>role="group"</code> on button
                groups to indicate their relationship
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Add descriptive <code
                  >aria-label</code
                > attributes to explain the button group's purpose
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Mark active states with <code
                  >aria-current="page"</code
                >
                or <code>aria-pressed="true"</code>
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Ensure sufficient color contrast
                between button text and backgrounds
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Provide visible focus indicators for
                keyboard navigation
              </li>
              <li>
                <i class="ri-check-line text-success me-2"></i>Include descriptive text or
                aria-labels for icon-only buttons
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
