---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with navigation breadcrumbs
const pageHeaderConfig = {
  title: 'Text Animations',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Text Animations', class: 'active' }
  ]
}

// Text animation examples
const example1Html = `<h2 class="typer" data-type-speed="50" data-back-speed="50" data-loop="false" data-strings="modern design,clean code,seamless integration">
  Front theme is a powerful theme with <span id="example" class="text-primary"></span>
</h2>
`

const example1Js = `<script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>

<script>
  // Wait for the DOM to be ready before running the script
  document.addEventListener('DOMContentLoaded', function () {
    // Select all elements with the class 'typer'
    const typers = document.querySelectorAll('.typer')

    typers.forEach(function (typer) {
      // Get the configuration values from data attributes
      const typeSpeed = typer.getAttribute('data-type-speed') || 50
      const backSpeed = typer.getAttribute('data-back-speed') || 50
      const strings = typer.getAttribute('data-strings')
        ? typer.getAttribute('data-strings').split(',')
        : []
      const loop = typer.getAttribute('data-loop') === 'true'

      // Initialize the Typed.js instance with the custom options
      new Typed(typer.querySelector('.text-primary'), {
        strings: strings,
        typeSpeed: parseInt(typeSpeed, 10),
        backSpeed: parseInt(backSpeed, 10),
        loop: loop,
        backDelay: 1000 // Add a slight delay before the text starts backspacing
      })
    })
  })
</script>
`

const example2Html = `<h2 class="typer" data-type-speed="70" data-back-speed="30" data-loop="true" data-strings="scalability,design,customization">
  This framework is built for <span id="example-2" class="text-primary"></span>
</h2>
`

const example2Js = `<script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>

<script>
  // Wait for the DOM to be ready before running the script
  document.addEventListener('DOMContentLoaded', function () {
    // Select all elements with the class 'typer'
    const typers = document.querySelectorAll('.typer')

    typers.forEach(function (typer) {
      // Get the configuration values from data attributes
      const typeSpeed = typer.getAttribute('data-type-speed') || 50
      const backSpeed = typer.getAttribute('data-back-speed') || 50
      const strings = typer.getAttribute('data-strings')
        ? typer.getAttribute('data-strings').split(',')
        : []
      const loop = typer.getAttribute('data-loop') === 'true'

      // Initialize the Typed.js instance with the custom options
      new Typed(typer.querySelector('.text-primary'), {
        strings: strings,
        typeSpeed: parseInt(typeSpeed, 10),
        backSpeed: parseInt(backSpeed, 10),
        loop: loop,
        backDelay: 1000 // Add a slight delay before the text starts backspacing
      })
    })
  })
</script>
`

const example3Html = `<h2>
  Front theme is a powerful theme with <span class="text-primary ms-2">
    <span class="fade-animation">flexibility</span>
    <span class="fade-animation">speed</span>
    <span class="fade-animation">clean code</span>
  </span>
</h2>
`

const example3Js = `<script>
const texts = document.querySelectorAll('.fade-animation');
let currentIndex = 0;

function fadeText() {
  // Reset all texts to be hidden
  texts.forEach(text => text.classList.remove('active'));

  // Show the current text with the fade-in effect
  texts[currentIndex].classList.add('active');

  // Move to the next index for the next iteration
  currentIndex = (currentIndex + 1) % texts.length;
}

// Start the fade-in/fade-out cycle every 3 seconds
setInterval(fadeText, 3000);

// Initial fade-in for the first text
fadeText();
</script>
`

const example4Html = `<h2 class="slide-text-container">
  Experience the power of <span class="text-primary slide-text">innovation</span>
</h2>
`

const example4Css = `.slide-text-container {
  overflow: hidden;
}

.slide-text {
  display: inline-block;
  transform: translateX(-100%);
  animation: slideIn 2s ease-out forwards;
}

@keyframes slideIn {
  to {
    transform: translateX(0);
  }
}
`

const example4Js = `<script>
// Restart animation on page load
document.addEventListener('DOMContentLoaded', function() {
  const slideText = document.querySelector('.slide-text');
  if (slideText) {
    slideText.style.animation = 'none';
    slideText.offsetHeight; // Trigger reflow
    slideText.style.animation = 'slideIn 2s ease-out forwards';
  }
});
</script>
`

const example5Html = `<h2>
  Get ready for <span class="text-primary bounce-text">amazing results</span>
</h2>
`

const example5Css = `.bounce-text {
  display: inline-block;
  animation: bounceIn 1.5s ease-out;
}

@keyframes bounceIn {
  0% {
    transform: scale(0.3);
    opacity: 0;
  }
  50% {
    transform: scale(1.05);
  }
  70% {
    transform: scale(0.9);
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}
`

const example5Js = `<script>
// Restart animation on page load
document.addEventListener('DOMContentLoaded', function() {
  const bounceText = document.querySelector('.bounce-text');
  if (bounceText) {
    bounceText.style.animation = 'none';
    bounceText.offsetHeight; // Trigger reflow
    bounceText.style.animation = 'bounceIn 1.5s ease-out';
  }
});
</script>
`

const example6Html = `<h2>
  Discover the <span class="text-primary char-reveal">future of web development</span>
</h2>
`

const example6Css = `.char-reveal .char {
  display: inline-block;
  opacity: 0;
  transform: translateY(20px);
  animation: revealChar 0.6s ease-out forwards;
}

@keyframes revealChar {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
`

const example6Js = `<script>
document.addEventListener('DOMContentLoaded', function() {
  const charRevealElement = document.querySelector('.char-reveal');
  if (charRevealElement) {
    const text = charRevealElement.textContent;
    charRevealElement.innerHTML = '';

    text.split('').forEach((char, index) => {
      const span = document.createElement('span');
      span.className = 'char';
      span.textContent = char === ' ' ? '\u00A0' : char; // Use non-breaking space
      span.style.animationDelay = (index * 0.05) + 's';
      charRevealElement.appendChild(span);
    });
  }
});
</script>
`

const example7Html = `<h2>
  <span class="text-primary glow-text">Illuminate your ideas</span>
</h2>
`

const example7Css = `.glow-text {
  animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
  from {
    text-shadow: 0 0 5px currentColor, 0 0 10px currentColor, 0 0 15px currentColor;
  }
  to {
    text-shadow: 0 0 10px currentColor, 0 0 20px currentColor, 0 0 30px currentColor, 0 0 40px currentColor;
  }
}
`

const example7Js = `<script>
// No JavaScript needed for this pure CSS animation
</script>
`
---

<AdminLayout
  title="Text Animations"
  description="Dynamic text animation components for engaging and interactive typographic effects"
  currentPath="docs/interface/text-animations"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderConfig} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Text animation components are dynamic UI elements that bring motion and interactivity to
            text, enhancing the visual appeal and engagement of content within an interface.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="typer">Typer</h3>
            <p class="text-muted mb-3">
              Creates a realistic typing effect using the Typed.js library. Perfect for hero
              sections, landing pages, or anywhere you want to draw attention to key messages.
              Configure typing speed with <code>data-type-speed</code>, backspace speed with <code
                >data-back-speed</code
              >, and multiple strings with <code>data-strings</code> (comma-separated). Set
              <code>data-loop="false"</code> to type once or <code>data-loop="true"</code> for continuous
              cycling.
            </p>

            <ComponentPreview
              title="Typer"
              height="200px"
              component={example1Html}
              htmlCode={example1Html}
              jsCode={example1Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="typer-with-loop">Typer with loop</h3>
            <p class="text-muted mb-3">
              A continuous version of the typing effect that cycles through multiple phrases. The
              text types out completely, pauses briefly, then backspaces and starts the next phrase.
              Ideal for showcasing multiple features, benefits, or concepts in a dynamic way. The
              loop creates an engaging, ever-changing message that keeps users' attention.
            </p>

            <ComponentPreview
              title="Typer with Loop"
              height="200px"
              component={example2Html}
              htmlCode={example2Html}
              jsCode={example2Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="text-fade">Text fade</h3>
            <p class="text-muted mb-3">
              Smooth fade transitions between different text phrases. Each text string appears with
              a gentle fade-in effect, remains visible for a few seconds, then fades out before the
              next string appears. This creates a subtle, elegant way to cycle through multiple
              messages without the mechanical feel of typing effects. Perfect for testimonials,
              feature highlights, or rotating taglines.
            </p>

            <ComponentPreview
              title="Text Fade"
              height="150px"
              component={example3Html}
              htmlCode={example3Html}
              jsCode={example3Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="slide-text">Slide Text</h3>
            <p class="text-muted mb-3">
              Text slides in from the left side of the container, creating a dynamic entrance
              effect. Uses CSS transforms and animations for smooth motion. Great for revealing
              important information or creating visual interest when content loads. The sliding
              motion draws the eye and creates a sense of movement and energy on the page.
            </p>

            <ComponentPreview
              title="Slide Text"
              height="200px"
              component={example4Html}
              htmlCode={example4Html}
              cssCode={example4Css}
              jsCode={example4Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="bounce-text">Bounce Text</h3>
            <p class="text-muted mb-3">
              Text appears with a playful bounce effect, starting small and scaling up with a slight
              overshoot before settling into place. This animation adds personality and energy to
              your content, making it feel more dynamic and engaging. Perfect for call-to-action
              text, announcements, or any content that should feel exciting and energetic.
            </p>

            <ComponentPreview
              title="Bounce Text"
              height="200px"
              component={example5Html}
              htmlCode={example5Html}
              cssCode={example5Css}
              jsCode={example5Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="char-reveal">Character Reveal</h3>
            <p class="text-muted mb-3">
              Each character appears individually with a staggered animation, creating a wave-like
              reveal effect across the text. Characters slide up from below while fading in, with
              each letter delayed slightly from the previous one. This creates an elegant,
              sophisticated animation that's perfect for headlines, important announcements, or any
              text that deserves special attention.
            </p>

            <ComponentPreview
              title="Character Reveal"
              height="200px"
              component={example6Html}
              htmlCode={example6Html}
              cssCode={example6Css}
              jsCode={example6Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="glow-text">Glow Text</h3>
            <p class="text-muted mb-3">
              Text pulses with a glowing effect that alternates between subtle and intense
              illumination. Uses CSS text-shadow to create the glow effect, which continuously
              animates to draw attention. Perfect for highlighting special offers, important
              announcements, or creating a futuristic, high-tech aesthetic. The glow effect works
              especially well with primary or accent colors.
            </p>

            <ComponentPreview
              title="Glow Text"
              height="200px"
              component={example7Html}
              htmlCode={example7Html}
              cssCode={example7Css}
              jsCode={example7Js}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
