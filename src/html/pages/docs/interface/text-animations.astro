---
import AdminLayout from '../../../layouts/admin/admin-layout.astro'
import ComponentPreview from '../../../components/component-preview/component-preview.astro'
import Toc from '../../../components/toc/toc.astro'
import PageHeader from '../../../components/common/page-header.astro'
import { getPathPrefix } from '../../../../utils/path.js'

// Page header configuration with navigation breadcrumbs
const pageHeaderConfig = {
  title: 'Text Animations',
  breadcrumbs: [
    { label: 'Docs', href: getPathPrefix('/docs') },
    { label: 'Interface', href: getPathPrefix('/interface') },
    { label: 'Text Animations', class: 'active' }
  ]
}

// Text animation examples
const example1Html = `<h2 class="typer" data-type-speed="50" data-back-speed="50" data-loop="false" data-strings="modern design,clean code,seamless integration">
  Front theme is a powerful theme with <span id="example" class="text-primary"></span>
</h2>
`

const example1Js = `<script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>

<script>
  // Wait for the DOM to be ready before running the script
  document.addEventListener('DOMContentLoaded', function () {
    // Select all elements with the class 'typer'
    const typers = document.querySelectorAll('.typer')

    typers.forEach(function (typer) {
      // Get the configuration values from data attributes
      const typeSpeed = typer.getAttribute('data-type-speed') || 50
      const backSpeed = typer.getAttribute('data-back-speed') || 50
      const strings = typer.getAttribute('data-strings')
        ? typer.getAttribute('data-strings').split(',')
        : []
      const loop = typer.getAttribute('data-loop') === 'true'

      // Initialize the Typed.js instance with the custom options
      new Typed(typer.querySelector('.text-primary'), {
        strings: strings,
        typeSpeed: parseInt(typeSpeed, 10),
        backSpeed: parseInt(backSpeed, 10),
        loop: loop,
        backDelay: 1000 // Add a slight delay before the text starts backspacing
      })
    })
  })
</script>
`

const example2Html = `<h2 class="typer" data-type-speed="70" data-back-speed="30" data-loop="true" data-strings="scalability,design,customization">
  This framework is built for <span id="example-2" class="text-primary"></span>
</h2>
`

const example2Js = `<script src="https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js"></script>

<script>
  // Wait for the DOM to be ready before running the script
  document.addEventListener('DOMContentLoaded', function () {
    // Select all elements with the class 'typer'
    const typers = document.querySelectorAll('.typer')

    typers.forEach(function (typer) {
      // Get the configuration values from data attributes
      const typeSpeed = typer.getAttribute('data-type-speed') || 50
      const backSpeed = typer.getAttribute('data-back-speed') || 50
      const strings = typer.getAttribute('data-strings')
        ? typer.getAttribute('data-strings').split(',')
        : []
      const loop = typer.getAttribute('data-loop') === 'true'

      // Initialize the Typed.js instance with the custom options
      new Typed(typer.querySelector('.text-primary'), {
        strings: strings,
        typeSpeed: parseInt(typeSpeed, 10),
        backSpeed: parseInt(backSpeed, 10),
        loop: loop,
        backDelay: 1000 // Add a slight delay before the text starts backspacing
      })
    })
  })
</script>
`
const example3Html = `<h2>
  Front theme is a powerful theme with <span class="text-primary ms-2">
    <span class="fade-animation">flexibility</span>
    <span class="fade-animation">speed</span>
    <span class="fade-animation">clean code</span>
  </span>
</h2>
`

const example3Js = `<script>
const texts = document.querySelectorAll('.fade-animation');
let currentIndex = 0;

function fadeText() {
  // Reset all texts to be hidden
  texts.forEach(text => text.classList.remove('active'));
  
  // Show the current text with the fade-in effect
  texts[currentIndex].classList.add('active');
  
  // Move to the next index for the next iteration
  currentIndex = (currentIndex + 1) % texts.length;
}

// Start the fade-in/fade-out cycle every 3 seconds
setInterval(fadeText, 3000);

// Initial fade-in for the first text
fadeText();
</script>
`

// Shared preview configuration for consistent component display
const previewConfig = {
  cssCode: '',
  jsCode: ''
}
---

<AdminLayout
  title="Text Animations"
  description="Dynamic text animation components for engaging and interactive typographic effects"
  currentPath="docs/interface/text-animations"
  enableComponentPreview={true}
>
  <PageHeader {...pageHeaderConfig} />
  <div class="row">
    <div class="col-lg-9 col-xl-9 order-1 order-lg-0">
      <div class="row">
        <div class="col-12">
          <p class="my-0">
            Text animation components are dynamic UI elements that bring motion and interactivity to
            text, enhancing the visual appeal and engagement of content within an interface.
          </p>
        </div>
      </div>
      <div class="row js-toc-content">
        <div class="col-12">
          <div class="my-3">
            <h3 class="mb-0" id="typer">Typer</h3>
            <p class="py-2">
              This creates a typing effect where each letter of the text appears one by one,
              mimicking the process of typing on a keyboard.
            </p>

            <ComponentPreview
              title="Typer"
              height="200px"
              component={example1Html}
              htmlCode={example1Html}
              jsCode={example1Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="typer-with-loop">Typer with loop</h3>
            <p class="py-2">
              A continuous version of the typing effect, where text is typed out, then erased, and
              retyped in a looping cycle.
            </p>

            <ComponentPreview
              title="Typer with Loop"
              height="200px"
              component={example2Html}
              htmlCode={example2Html}
              jsCode={example2Js}
            />
          </div>
          <div class="my-3">
            <h3 class="mb-0" id="text-fade">Text fade</h3>
            <p class="py-2">
              Multiple text strings appear one by one, with each string fading in smoothly, staying
              visible for a moment, and then fading out before the next string appears.
            </p>

            <ComponentPreview
              title="Text Fade"
              height="150px"
              component={example3Html}
              htmlCode={example3Html}
              jsCode={example3Js}
            />
          </div>
        </div>
      </div>
    </div>
    <Toc />
  </div>
</AdminLayout>
